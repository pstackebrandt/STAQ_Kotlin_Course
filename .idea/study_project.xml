<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="14" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <EduCourse>
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="David" />
                <option name="id" value="67735660" />
                <option name="lastName" value="Stibbe" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Study" />
          <option name="createDate" value="1542920727000" />
          <option name="customPresentableName" />
          <option name="description" value="An introductionary course on Kotlin for programmers." />
          <option name="environment" value="" />
          <option name="fromZip" value="false" />
          <option name="id" value="50282" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="67735660" />
            </list>
          </option>
          <option name="language" value="kotlin" />
          <option name="languageCode" value="en" />
          <option name="name" value="Introductory Kotlin workshop for programmers" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list />
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm11 kotlin" />
          <option name="updateDate" value="1561320044000" />
          <option name="items">
            <list>
              <Section>
                <option name="courseId" value="50282" />
                <option name="customPresentableName" />
                <option name="id" value="73070" />
                <option name="index" value="1" />
                <option name="name" value="Test Installation" />
                <option name="position" value="1" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1561320042000" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192979" />
                      <option name="index" value="1" />
                      <option name="name" value="Test" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1561320042000" />
                      <option name="unitId" value="167434" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Before starting the course&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    First, let's make sure the setup of your environment is ok.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Main method&lt;/h2&gt;&#10;&lt;p&gt;&#10;    This method is sometimes added so you can play around with the assignment without having to rely on test output.&#10;&#10;    &lt;/p&gt;&#10;&lt;p&gt;&#10;    Try to execute the main method by pressing on the green arrow to its left.&#10;&#10;    &lt;img src=&quot;main-run.png&quot;/&gt;&lt;br/&gt;&#10;&lt;/p&gt;&#10;&lt;b&gt;If the green arrow is not present&lt;/b&gt;&#10;&lt;p&gt;&#10;    There can be various reasons why the green arrow is not showing:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;you need to install the Kotlin plugin. If you do not know how, ask an instructor (or the person next to you).&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;    But, if the Kotlin plugin is already present, then there is a high likely hood of there being a gradle issue.&#10;    &lt;ul&gt;&#10;        &lt;li&gt;Open the gradle tool window on the right&lt;/li&gt;&#10;        &lt;li&gt;first press 'refresh'&lt;/li&gt;&#10;        &lt;li&gt;if that goes well, then 'execute gradle task' &gt; popup window &gt;  type 'clean build'&lt;/li&gt;&#10;    &lt;/ul&gt;&#10;&#10;    There will probably be an error message in one of the steps, which could help you on your way.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Check task - step one&lt;/h2&gt;&#10;&lt;p&gt;&#10;    This is used to validate your assignment. It will kick off various Tests and inform you about the result.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Click on the box-checkmark icon in the top of this Task Description. It&#10;    should try to kick off the tests.&#10;    However, in this case it &lt;b&gt;should&lt;/b&gt; return &lt;b&gt;Compilation failure&lt;/b&gt;!&#10;    &lt;br/&gt;&lt;img src=&quot;check-task.png&quot;/&gt;&lt;br/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Check task - placeholder&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Some assignments have &lt;b&gt;placeholders&lt;/b&gt;, which indicate what to fill in where in the task.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    To make the currentcheck work, you have to fill in the &lt;b&gt;placeholder&lt;/b&gt; in the task.&#10;&#10;    Type &quot;&lt;b&gt;TestMe&lt;/b&gt;&quot; (without the quotes) in the placeholder, and run the 'check task' again.&lt;br/&gt;&#10;    &lt;img src=&quot;placeholder.png&quot;/&gt;&lt;br/&gt;&#10;&#10;    When running &quot;check task&quot;, it should now report &lt;b&gt;Congratulations!&lt;/b&gt;.&#10;    This means the placeholder was filled in correctly.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;h2&gt;Before you can continue!&lt;/h2&gt;&#10;&#10;Before you can continue, check the hint below. It will tell you something important...&#10;&#10;&lt;br&gt;&#10;&lt;/html&gt;&#10;&lt;div class='hint'&gt;You may now continue ... ;-)&lt;/div&gt;&#10;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548534" />
                            <option name="index" value="1" />
                            <option name="name" value="Check setup" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="46" />
                                                <option name="offset" value="6" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="43" />
                                            <option name="offset" value="6" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="ReplaceMe //Replace this with the text: TestMe" />
                                            <option name="possibleAnswer" value="TestMe" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class ReplaceMe //Replace this with the text: TestMe&#10;&#10;/**&#10; * Main method, you should see a green arrow next to it in the sidebar.&#10; * If you click on it, it should run, and display &quot;Hello World&quot;&#10; */&#10;fun main() {&#10;    println(&quot;Hello World&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        try {&#10;            Class.forName(&quot;TestMe&quot;, false, Test::class.java.classLoader)&#10;        } catch (e: ClassNotFoundException) {&#10;            Assert.fail(&quot;Please fill in the placeholder with the correct Class!\nExpected:TestMe\n&quot;)&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="placeholder.png">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="placeholder.png" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="check-task.png">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="check-task.png" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="main-run.png">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="main-run.png" />
                                      <option name="text" value="" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1561320042000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                  </list>
                </option>
              </Section>
              <Section>
                <option name="courseId" value="50282" />
                <option name="customPresentableName" />
                <option name="id" value="73071" />
                <option name="index" value="2" />
                <option name="name" value="Small Exercises" />
                <option name="position" value="2" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1557009965000" />
                <option name="items">
                  <list>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192980" />
                      <option name="index" value="1" />
                      <option name="name" value="Basics" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1556970976000" />
                      <option name="unitId" value="167435" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;h1&gt;Hello!&lt;/h1&gt;&#10;&lt;p&gt;Hello to the world of Kotlin!&lt;/p&gt;&#10;&#10;&lt;p&gt;To get started we will describe a bit about functions.&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Functions are declared using the &lt;b&gt;&lt;code&gt;fun&lt;/code&gt;&lt;/b&gt; keyword. Functions that are defined inside a class or object&#10;    are called &lt;b&gt;member functions&lt;/b&gt;. Values are returned using the &lt;b&gt;&lt;code&gt;return&lt;/code&gt;&lt;/b&gt; keyword.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    fun myFunction():String{&#10;        return &quot;Cowabunga&quot;&#10;    }&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;This a function returning a String, as defined by the &lt;b&gt;:String&lt;/b&gt; after its name&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;If a function body contains only a single expression, you reduce it to a &lt;b&gt;single-line function&lt;/b&gt;.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    fun myFunction() = &quot;Cowabunga&quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    Function parameters are provided between the &quot;()&quot;. They always have the pattern &lt;code&gt;name:Type&lt;/code&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    fun myFunction(myParameter:Int):String{&#10;        return &quot;Cowabunga nr&quot; + myParameter&#10;    }&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    To call a function just call its name and pass the arguments between the ().&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    myFunction(12)&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Take a look at &lt;a href=&quot;http://kotlinlang.org/docs/reference/basic-syntax.html#defining-functions&quot;&gt;function syntax.&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;Have the function here return the string &lt;code&gt;&amp;quot;Hello &amp;quot; + name&lt;/code&gt;.&lt;/p&gt;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548535" />
                            <option name="index" value="1" />
                            <option name="name" value="Hello, World!" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="&quot;Hello &quot; + name" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="6" />
                                                <option name="offset" value="25" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="13" />
                                            <option name="offset" value="25" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="TODO()" />
                                            <option name="possibleAnswer" value="&quot;Hello &quot; + name" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun hello(name:String) = TODO()&#10;&#10;&#10;/**&#10; * Main method to play around with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(&quot;Hi, I am a simple string&quot;)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun shouldReturnHelloKotlin() {&#10;        assertEquals(&quot;Should return value \&quot;Hello Kotlin\&quot; &quot;,&#10;                &quot;Hello Kotlin&quot;, hello(&quot;Kotlin&quot;))&#10;&#10;    }&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755849000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Variables&lt;/h1&gt;&#10;&#10;Kotlin has two type of keywords to define variable declarations:&#10;&lt;ul&gt;&#10;    &lt;li&gt;&lt;b&gt;val&lt;/b&gt; - can only be assigned once&lt;/li&gt;&#10;    &lt;li&gt;&lt;b&gt;var&lt;/b&gt; - can be re-assigned &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&#10;&lt;h2&gt;Syntax&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;Example of declaring a variable:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    var myVariable:Int = 123&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;As you can see, the type of the variable is &lt;b&gt;after&lt;/b&gt; the variable name, seperated by a colon (:).&lt;/p&gt;&#10;&lt;p&gt;Types can be inferred, so the following is allowed as well:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    var myVariable = 123&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Kotlin will infer that &lt;b&gt;myVariable&lt;/b&gt; is of type Int&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Variables can be declared inside functions, as well as outside. The latter called 'top-level' variables.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    For more about this topic, read this &lt;a href=&quot;https://kotlinlang.org/docs/reference/basic-syntax.html#defining-variables&quot;&gt;Kotlin reference&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;In this task the class &lt;b&gt;MyTask&lt;/b&gt; will be instantiated a &lt;b&gt;maxNumberOfTasks&lt;/b&gt; times.&#10;At each instantiation &lt;b&gt;printTask&lt;/b&gt; will be invoked.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;All you need to do to make this work is to make sure of the following&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;maxNumberOfTasks is read only&lt;/li&gt;&#10;    &lt;li&gt;numberOfTasks can be reassigned a new value&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548536" />
                            <option name="index" value="2" />
                            <option name="name" value="Variables" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="18" />
                                                <option name="offset" value="20" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="4" />
                                            <option name="offset" value="20" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="Make me a variable" />
                                            <option name="possibleAnswer" value="var" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="18" />
                                                <option name="offset" value="62" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="3" />
                                            <option name="offset" value="48" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="Make me a constant" />
                                            <option name="possibleAnswer" value="val" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class MyTask {&#10;&#10;    Make me a variable numberOfTasks = 1&#10;&#10;    Make me a constant maxNumberOfTasks = 6&#10;&#10;    fun printTask(){&#10;        println(&quot;This is task number: &quot; + numberOfTasks)&#10;    }&#10;}&#10;&#10;/**&#10; * Use this method to play around&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;&#10;    val task = MyTask()&#10;&#10;    //This should be possible&#10;    //task.numberOfTasks += 1&#10;&#10;    //this is not possible:&#10;    // task.maxNumberOfTasks&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertFalse&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;import kotlin.reflect.KMutableProperty&#10;import kotlin.reflect.KMutableProperty1&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        assertTrue(&quot;numberOfTasks should be a variable&quot;,&#10;                MyTask::numberOfTasks is KMutableProperty&lt;*&gt;&#10;        )&#10;&#10;        assertFalse(&quot;maxNumberOfTasks should be a constant&quot;,&#10;                MyTask::maxNumberOfTasks is KMutableProperty&lt;*&gt;&#10;        )&#10;&#10;&#10;        val property = MyTask::numberOfTasks&#10;        if (property is KMutableProperty1&lt;MyTask, Int&gt;) {&#10;            var task = MyTask()&#10;            val max = task.maxNumberOfTasks&#10;            var i = 0&#10;            while (i &lt; max) {&#10;                task = MyTask()&#10;                property.set(task, i + 1)&#10;                task.printTask()&#10;                i++&#10;            }&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755850000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&#10;&#10;&lt;html&gt;&#10;&lt;h1&gt;String templating and Raw String&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    Kotlin has support for Raw Strings and String Literals.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    Raw Strings provide you the ability to use newline and spacing without escaping.&#10;    A raw string is delimited by&lt;code&gt;&quot;&quot;&quot;&lt;/code&gt; (triple quote) Eg.:&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    var myRawString = &quot;&quot;&quot;first line&#10;     second line&#10;     third line&quot;&quot;&quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;resulting in&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;first line&#10;     second line&#10;     third line&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;String Templates is the ability to use variables directly in a String. Eg.:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    var myVar = 123&#10;    println(&quot;The value of myVar: $myVar&quot;)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;resulting in&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;The value of myVar: 123&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;For more complex expressions in the template, you can use &lt;code&gt;${ ... }&lt;/code&gt; (with accolades).&#10;&lt;/p&gt;&#10;&#10;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;Rewrite the below code using raw string and string templates&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;    &lt;code&gt;&#10;class LittlePony(private val name: String, private val color: String) {&#10;&#10;    override fun toString(): String {&#10;        return &quot;\&quot;Name\&quot; : &quot; + name + &quot;\n&quot; + &quot;\&quot;Color\&quot; : &quot; + color&#10;    }&#10;}&#10;&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;Note:&#10;    &lt;code&gt;\n&lt;/code&gt; is the classic sequence for a newline, and &lt;code&gt;\&quot;&lt;/code&gt; is used to be able to print a '&lt;code&gt;&quot;&lt;/code&gt;'&#10;&#10;&lt;/p&gt;&#10;&lt;p&gt;Read the section about&#10;    &lt;a href=&quot;https://kotlinlang.org/docs/reference/basic-types.html#strings&quot;&gt;Strings&lt;/a&gt;&#10;    &amp;&#10;    &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/trim-margin.html#kotlin.text%24trimMargin%28kotlin.String%2C+kotlin.String%29%2FmarginPrefix&quot;&gt;trimMargin.&lt;/a&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548537" />
                            <option name="index" value="3" />
                            <option name="name" value="Strings" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Trim leading whitespace characters with `trimMargin()`." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="52" />
                                                <option name="offset" value="126" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="63" />
                                            <option name="offset" value="126" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="&quot;\&quot;Name\&quot; : &quot; + name + &quot;\n&quot; + &quot;\&quot;Color\&quot; : &quot; + color" />
                                            <option name="possibleAnswer" value="&quot;&quot;&quot;&quot;Name&quot; : ${name}&#10;&quot;Color&quot; : ${color}&quot;&quot;&quot;" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class LittlePony(private val name: String, private val color: String) {&#10;&#10;    override fun toString(): String {&#10;        return &quot;\&quot;Name\&quot; : &quot; + name + &quot;\n&quot; + &quot;\&quot;Color\&quot; : &quot; + color&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        val littlePony = LittlePony(&quot;Rainbow Dash&quot;, &quot;blue&quot;).toString()&#10;&#10;        print(littlePony)&#10;&#10;        assertEquals(&quot;&quot;&quot;&quot;Name&quot; : Rainbow Dash&#10;            |&quot;Color&quot; : blue&quot;&quot;&quot;.trimMargin(),&#10;                littlePony)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755850000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Other Basic Types&lt;/h1&gt;&#10;&#10;&lt;p&gt;Besides the String, there are of course plenty other basic types. We will quickly go over them.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Characters&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    A single character. Defined using single quotes (').&#10;&lt;/p&gt;&#10;&lt;p&gt;Example of the declaration of a character:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    val myChar = 'A'&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Booleans&lt;/h2&gt;&#10;&lt;p&gt;&#10;    A boolean has two value, true or false. Supported operators are:&#10;&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&amp;&amp; : and&lt;/li&gt;&#10;    &lt;li&gt;|| : or&lt;/li&gt;&#10;    &lt;li&gt;! : not&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    val myTruth = true || false&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&#10;&lt;h2&gt;Numbers&lt;/h2&gt;&#10;&#10;&lt;p&gt;Kotlin recognizes the following &lt;b&gt;Number&lt;/b&gt; types: &lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;Double&lt;/li&gt;&#10;    &lt;li&gt;Float&lt;/li&gt;&#10;    &lt;li&gt;Long&lt;/li&gt;&#10;    &lt;li&gt;Int&lt;/li&gt;&#10;    &lt;li&gt;Short&lt;/li&gt;&#10;    &lt;li&gt;Byte&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;p&gt;&#10;    You will most likely recognize all of these.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;Example of the declaration of a long:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    val myLong:Long= 123&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Arrays&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    A container of certain objects that has a fixed length. Initialization example:&#10;    Initialization is done using the &lt;code&gt;arrayOf()&lt;/code&gt; function.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    You can get an set from/to the array using &lt;b&gt;[i]&lt;/b&gt;, where &lt;b&gt;i&lt;/b&gt; is the index&#10;    starting &lt;b&gt;from 0&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Example:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    val myArray = arrayOf(3,2,5,7)&#10;    myArray[2] = myArray[1] + myArray[3] // assign 9 to second index&#10;    // myArray is now [3,2,9,7]&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;You can read more at &lt;a href=&quot;https://kotlinlang.org/docs/reference/basic-types.html&quot;&gt;Kotlin reference&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Add all values of the array myArray together and story them in index &lt;b&gt;0&lt;/b&gt; of myArray&#10;&lt;/p&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548538" />
                            <option name="index" value="4" />
                            <option name="name" value="Other Basic Types" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="27" />
                                                <option name="offset" value="63" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="27" />
                                            <option name="offset" value="63" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Write the assignment here" />
                                            <option name="possibleAnswer" value="myArray[0] = myArray[0] +  myArray[1] + myArray[2]  + myArray[3]" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="val myArray = arrayOf(5, 6, 3, 4)&#10;&#10;&#10;fun addingTheArray(){&#10;&#10;    //Write the assignment here&#10;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;    //try somethings...&#10;}&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        addingTheArray()&#10;        Assert.assertEquals(&#10;                &quot;Resulting array is not meeting expectations&quot;,&#10;                arrayOf(18, 6, 3, 4).toList(),&#10;                myArray.toList()&#10;        )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755851000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Class definitions&lt;/h1&gt;&#10;&#10;Classes are defined using the keyword &lt;b&gt;&lt;code&gt;class&lt;/code&gt;&lt;/b&gt;. An example of a class declaration:&#10;&lt;pre&gt;&lt;code&gt;&#10;    class Person(age:Int) {&#10;    }&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;This is a class &lt;b&gt;&lt;code&gt;Person&lt;/code&gt;&lt;/b&gt; with a constructor that sets the field &lt;b&gt;&lt;code&gt;age&lt;/code&gt;&lt;/b&gt; .&#10;    A class consists of 3 parts:&#10;    &lt;ul&gt;&#10;    &lt;li&gt;class name - the name of the class &lt;/li&gt;&#10;    &lt;li&gt;class body - the code between the curly braces&lt;/li&gt;&#10;    &lt;li&gt;class header- everything between the class name and body&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;&#10;    if the body is empty, the curly braces can be omitted :&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;    class Person(age:Int)&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    To have secondary constructors, you define these using the keyword &lt;b&gt;&lt;code&gt;constructor&lt;/code&gt;&lt;/b&gt;. E.g.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;     class Person(age:Int) {&#10;        constructor(age:Int, name:String) : this(age){&#10;            println(&quot;I am the second constructor&quot;)&#10;        }&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;In this example the second constructor delegates to the first constructor, using the &lt;b&gt;&lt;code&gt;this&lt;/code&gt;&lt;/b&gt; keyword&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    To instantiate a class, just call it as if it is a regular function, e.g.&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;    val john = Person(25, &quot;john&quot;)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;Create a class Car that has two constructors:&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;        primary: numberOfWheels (Int) as argument&#10;    &lt;/li&gt;&#10;&#10;    &lt;li&gt;&#10;        secundary: numberOfWheels and color (String) as arguments&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548539" />
                            <option name="index" value="5" />
                            <option name="name" value="Classes - constructors" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="25" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="25" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Implement the Car class" />
                                            <option name="possibleAnswer" value="class Car(numberOfWheels:Int){&#10;    constructor(numberOfWheels: Int, color:String): this(numberOfWheels)&#10;&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="//Implement the Car class&#10;&#10;/**&#10; * Main function to play around with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;    val car = Car(12,&quot;red&quot;)&#10;    val car2 = Car(12)&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;       val car = Car(2)&#10;       val car2 = Car(2, &quot;green&quot;)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755853000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Properties&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    Classes in Kotlin can have properties. These can be declared as mutable, using the &lt;b&gt;var&lt;/b&gt; keyword or read-only using the &lt;b&gt;val&lt;/b&gt; keyword.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    class Animal(){&#10;        val nrOfLegs:Int = 0&#10;        var name = &quot;Kermit&quot;&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    To use a property, you can simply refer it by name:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    val myAnimal = Animal()&#10;    myAnimal.name = &quot;Dumbo&quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    For declaring properties and initializing them from the primary constructor, Kotlin has a concise syntax:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    class Animal(size:Int, val nrOfLegs:Int){&#10;        var name = &quot;Kermit&quot;&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    In this example, the property 'nrOfLegs' is initialized through the constructor.&#10;    The 'size' parameter of the constructor however, is &lt;b&gt;not&lt;/b&gt; a property.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    Almost forgot: everything in Kotlin is &lt;b&gt;public&lt;/b&gt; by default! If you do not want to expose something use&#10;    the &lt;b&gt;private&lt;/b&gt; keyword. e.g.&#10;&lt;/p&gt;&#10;&#10;class Animal(size:Int, private val nrOfLegs){&#10;    var name = &quot;Kermit&quot;&#10;}&#10;&#10;&lt;h2&gt;Inheritance&lt;/h2&gt;&#10;&lt;p&gt;&#10;    To declare an explicit supertype, we place the type after a colon in the class header:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    open class Animal(size: Int)&#10;&#10;    class Dog(size: Int) : Animal(size) //initialize Animal, using size&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    If the derived class has a primary constructor, the base class should be&#10;    initialized right there, using the arguments from the constructor.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Every class in Kotlin is &lt;b&gt;final&lt;/b&gt; by default. This means they can't be&#10;    inherited from. To allow other classes to inherit a given class, it should have the keyword&#10;    &lt;b&gt;open&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Functions&lt;/h2&gt;&#10;&#10;&lt;p&gt;Classes can have functions. Functions in a class are called &lt;b&gt;member functions&lt;/b&gt;. They can be accessed the&#10;same way as properties.&lt;/p&gt;&#10;&#10;&lt;b&gt;Overriding functions&lt;/b&gt;&#10;&#10;&lt;p&gt;To override an inherited function, two things need to be in place&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;it needs to be &lt;b&gt;open&lt;/b&gt; in the base class&lt;/li&gt;&#10;    &lt;li&gt;the inheriting class uses the &lt;b&gt;override&lt;/b&gt; keyword.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    open class Animal(size: Int){&#10;        open fun eat(){ ... }&#10;    }&#10;&#10;    class Dog(size: Int) : Animal(size){&#10;        override fun eat(){ ... }&#10;    }&#10;&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    To read more about classes, read &lt;a href=&quot;https://kotlinlang.org/docs/reference/classes.html&quot;&gt;Kotlin reference&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Create a class &lt;b&gt;Point&lt;/b&gt; that has one constructor parameter, &lt;code&gt;name:String&lt;/code&gt;, which initializes a&#10;    &lt;b&gt;property&lt;/b&gt;.&lt;br/&gt;&#10;    It also has a function '&lt;b&gt;nrOfCorners&lt;/b&gt;' which returns an int of value &lt;b&gt;0&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Now create a class &lt;b&gt;Line&lt;/b&gt; which extends Point, and overrides its function to return &lt;b&gt;2&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Do the same for &lt;b&gt;Square&lt;/b&gt;, but have it return &lt;b&gt;4&lt;/b&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548540" />
                            <option name="index" value="6" />
                            <option name="name" value="Classes - fields" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="26" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="70" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Create here your classes" />
                                            <option name="possibleAnswer" value="open class Point(val name: String) {&#10;    open fun nrOfCorners() = 0&#10;}&#10;&#10;open class Line(name: String) : Point(name) {&#10;    override fun nrOfCorners() = 2&#10;}&#10;&#10;open class Square(name: String) : Point(name) {&#10;    override fun nrOfCorners() = 4&#10;}" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="//Create here your classes&#10;&#10;/**&#10; * Main method to play with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.hamcrest.core.Is.`is`&#10;import org.junit.Assert&#10;import org.junit.Assert.assertThat&#10;import org.junit.Test&#10;import java.lang.reflect.Method&#10;&#10;class Test {&#10;//TODO: use the helper class for testing classes&#10;&#10;    @Test&#10;    fun testClassStructure() {&#10;        assertPointClass()&#10;        assertLineClass()&#10;        assertSquareClass()&#10;    }&#10;&#10;    private fun assertPointClass() {&#10;        val clazz = getClass(&quot;Point&quot;)&#10;&#10;        if (clazz == null) {&#10;            Assert.fail(&quot;Please create a Point class&quot;)&#10;            return&#10;        }&#10;&#10;        assertHasProperty(clazz, String::class.java, &quot;name&quot;)&#10;&#10;        assertHasConstructor(&#10;                clazz, String::class.java)&#10;&#10;&#10;&#10;        assertHasMethod(clazz, Int::class.java, &quot;nrOfCorners&quot;)&#10;    }&#10;&#10;&#10;    private fun assertLineClass() {&#10;        val clazz = getClass(&quot;Line&quot;)&#10;&#10;        if (clazz == null) {&#10;            Assert.fail(&quot;Please create a Line class&quot;)&#10;            return&#10;        }&#10;&#10;        val pointClazz = getClass(&quot;Point&quot;)&#10;        if (pointClazz == null) {&#10;            Assert.fail(&quot;Please create a Point class&quot;)&#10;            return&#10;        }&#10;&#10;        assertClassExtends(clazz, pointClazz)&#10;&#10;        assertHasProperty(clazz, String::class.java, &quot;name&quot;)&#10;&#10;        assertHasConstructor(&#10;                clazz, String::class.java)&#10;&#10;&#10;&#10;        assertHasMethod(clazz, Int::class.java, &quot;nrOfCorners&quot;)&#10;    }&#10;&#10;    private fun assertSquareClass() {&#10;        val clazz = getClass(&quot;Square&quot;)&#10;&#10;        if (clazz == null) {&#10;            Assert.fail(&quot;Please create a Square class&quot;)&#10;            return&#10;        }&#10;&#10;        val pointClazz = getClass(&quot;Point&quot;)&#10;        if (pointClazz == null) {&#10;            Assert.fail(&quot;Please create a Point class&quot;)&#10;            return&#10;        }&#10;&#10;        assertClassExtends(clazz, pointClazz)&#10;&#10;        assertHasProperty(clazz, String::class.java, &quot;name&quot;)&#10;&#10;        assertHasConstructor(&#10;                clazz, String::class.java)&#10;&#10;&#10;&#10;        assertHasMethod(clazz, Int::class.java, &quot;nrOfCorners&quot;)&#10;    }&#10;&#10;&#10;    @Test&#10;    fun testWorkingOfPoint() {&#10;        val clazz = getClass(&quot;Point&quot;)&#10;&#10;        val newInstance = construct(clazz, &quot;Woolly&quot;)&#10;&#10;        newInstance?.run {&#10;            val instance = this&#10;&#10;            getMethodIfExists(&quot;getName&quot;, instance, String::class.java)?.run {&#10;                assertThat(&#10;                        &quot;Name of Point not correct.&quot;,&#10;                        invoke(instance) as String,&#10;                        `is`(&quot;Woolly&quot;)&#10;                )&#10;            }&#10;&#10;&#10;            getMethodIfExists(&quot;nrOfCorners&quot;, instance, Int::class.java)?.run {&#10;                assertThat(&#10;                        &quot;Number of corners on Point not correct.&quot;,&#10;                        invoke(instance) as Int,&#10;                        `is`(0)&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    @Test&#10;    fun testWorkingOfLine() {&#10;        val clazz = getClass(&quot;Line&quot;)&#10;        val newInstance = construct(clazz, &quot;Mammoth&quot;)&#10;&#10;        newInstance?.run {&#10;            val instance = this&#10;&#10;            getMethodIfExists(&quot;getName&quot;, instance, String::class.java)?.run {&#10;                assertThat(&#10;                        &quot;Name of Line not correct.&quot;,&#10;                        invoke(instance) as String,&#10;                        `is`(&quot;Mammoth&quot;)&#10;                )&#10;            }&#10;            getMethodIfExists(&quot;nrOfCorners&quot;, instance, Int::class.java)?.run {&#10;                assertThat(&#10;                        &quot;Number of Line on Point not correct.&quot;,&#10;                        invoke(instance) as Int,&#10;                        `is`(2)&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    @Test&#10;    fun testWorkingOfSquare() {&#10;        val clazz = getClass(&quot;Square&quot;)&#10;        val newInstance = construct(clazz, &quot;Senior&quot;)&#10;&#10;        newInstance?.run {&#10;            val instance = this&#10;&#10;            getMethodIfExists(&quot;getName&quot;, instance, String::class.java)?.run {&#10;                assertThat(&#10;                        &quot;Name of Square not correct.&quot;,&#10;                        invoke(instance) as String,&#10;                        `is`(&quot;Senior&quot;)&#10;                )&#10;            }&#10;            getMethodIfExists(&quot;nrOfCorners&quot;, instance, Int::class.java)?.run {&#10;&#10;                assertThat(&#10;                        &quot;Number of corners on Square not correct.&quot;,&#10;                        invoke(instance) as Int,&#10;                        `is`(4)&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun assertClassExtends(clazz: Class&lt;*&gt;, parentClazz: Class&lt;*&gt;) {&#10;        val superclass = clazz.superclass&#10;        if (superclass != parentClazz) {&#10;&#10;            if (superclass == Object::class.java) {&#10;&#10;                Assert.fail(&quot;Mistake in class ${clazz.simpleName}: should extend ${parentClazz.simpleName}, but extends nothing&quot;)&#10;            } else {&#10;                Assert.fail(&quot;Mistake in class ${clazz.simpleName}: should extend ${parentClazz.simpleName}, but extends ${superclass.simpleName}&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun construct(clazz: Class&lt;*&gt;?, vararg args: Any): Any? {&#10;&#10;        val parms = args.map { arg -&gt; arg::class.java }.toTypedArray()&#10;&#10;        return clazz?.getConstructor(*parms)?.newInstance(*args)&#10;    }&#10;&#10;    private fun getMethodIfExists(name: String, instance: Any, retType: Class&lt;*&gt;): Method? {&#10;        try {&#10;            val method = instance::class.java.getMethod(name)!!&#10;            if (retType.isAssignableFrom(method.returnType)) {&#10;                return method&#10;            }&#10;        } catch (e: Exception) {&#10;        }&#10;        return null&#10;    }&#10;&#10;    private fun assertHasMethod(clazz: Class&lt;*&gt;, retType: Class&lt;*&gt;, method: String) {&#10;        try {&#10;            val found = clazz.getMethod(method)!!&#10;            if (!retType.isAssignableFrom(found.returnType)) {&#10;                Assert.fail(&quot;Mistake in class ${clazz.simpleName}: Function \&quot;${method}\&quot; returns type ${found.returnType}. Should be ${retType}&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Assert.fail(&quot;Mistake in class ${clazz.simpleName}: Missing \&quot;${method}\&quot; function&quot;)&#10;        }&#10;    }&#10;&#10;    private fun assertHasConstructor(clazz: Class&lt;*&gt;, vararg args: Class&lt;out Any&gt;) {&#10;        try {&#10;            clazz.getConstructor(*args)&#10;        } catch (e: Exception) {&#10;            Assert.fail(&quot;Mistake in class ${clazz.simpleName}: Missing the required constructor&quot;)&#10;        }&#10;    }&#10;&#10;&#10;    private fun assertHasProperty(clazz: Class&lt;*&gt;, retType: Class&lt;*&gt;, valName: String) {&#10;        val firstChar = valName[0].toUpperCase()&#10;        val restOfVal = valName.substring(1)&#10;&#10;        val getMethod = &quot;get${firstChar}${restOfVal}&quot;&#10;        try {&#10;            val method = clazz.getMethod(getMethod)!!&#10;            if (!retType.isAssignableFrom(method.returnType)) {&#10;                Assert.fail(&quot;Mistake in class ${clazz.simpleName}: Property \&quot;${valName}\&quot; is of type ${method.returnType}. Should be ${retType}&quot;)&#10;            }&#10;        } catch (e: Exception) {&#10;            Assert.fail(&quot;Mistake in class ${clazz.simpleName}: Can't see any \&quot;${valName}\&quot; property. Did you forget to add 'var' or 'val'?&quot;)&#10;        }&#10;    }&#10;&#10;    private fun getClass(className: String): Class&lt;*&gt;? {&#10;        return try {&#10;            Class.forName(className, false, Test::class.java.classLoader)!!&#10;        } catch (e: ClassNotFoundException) {&#10;            null&#10;        }&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755854000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;h1&gt;Data classes&lt;/h1&gt;&#10;&lt;p&gt;&#10;&lt;p&gt;In Kotlin we can write a Data Transfer Object (DTO) with the usual functionality and utilities that will fit on one line!&#10;&lt;/p&gt;&#10;&lt;p&gt;This is called a data class and is marked as data:&lt;/p&gt;&#10;&#10;&lt;code&gt;data class Dto(val id: UUID, val data: String)&lt;/code&gt;&#10;&#10;&lt;p&gt;The compiler automatically derives the following members from all properties declared in the primary constructor:&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;        equals()/hashCode() pair;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        toString() of the form &quot;Dto(val id: UUID, val data: String)&quot;;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;       and more..&#10;    &lt;/li&gt;&#10;&#10;&lt;/ul&gt;&#10;&lt;h2&gt;Assignment: Write a Person data class&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Now we like you to write a &lt;code&gt;data&lt;/code&gt; class. Copy the following class. Rewrite it so it becomes a &lt;code&gt;data&lt;/code&gt; class&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;class Person{&#10;&#10;    val name: String&#10;    val age : Int&#10;    val length : Double&#10;&#10;    constructor( name : String,  age : Int, length : Double ){&#10;        this.name = name&#10;        this.age = age&#10;        this.length = length&#10;    }&#10;&#10;    override fun equals(other: Any?): Boolean {&#10;        if (this === other) return true&#10;        if (javaClass != other?.javaClass) return false&#10;&#10;        other as Person&#10;&#10;        if (name != other.name) return false&#10;        if (age != other.age) return false&#10;        if (length != other.length) return false&#10;&#10;        return true&#10;    }&#10;&#10;    override fun hashCode(): Int {&#10;        var result = name.hashCode()&#10;        result = 31 * result + age&#10;        result = 31 * result + length.hashCode()&#10;        return result&#10;    }&#10;&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;Like to know more? Read the section about &lt;a href=&quot;https://kotlinlang.org/docs/reference/data-classes.html&quot;&gt;data classes&lt;/a&gt;. &lt;/p&gt;&#10;&#10;&lt;/p&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548541" />
                            <option name="index" value="7" />
                            <option name="name" value="Data Class" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="data class Person(val name: String, val age: Int, val length: Double)" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="15" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="75" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="// class Person" />
                                            <option name="possibleAnswer" value="data class Person(val name: String, val age: Int, val length: Double)" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="// class Person" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;&#10;    @Test&#10;    fun testSolution() {&#10;        assertPersonClass()&#10;    }&#10;&#10;    private fun assertPersonClass() {&#10;        val className = &quot;Person&quot;&#10;        val clazz = getClass(className)&#10;&#10;&#10;        if (clazz == null) {&#10;            Assert.fail(&quot;Please create a $className class&quot;)&#10;            return&#10;        }&#10;&#10;        clazz.assertIsDataClass()&#10;&#10;        val properties = mapOf(&#10;                &quot;name&quot; to String::class.java,&#10;                &quot;age&quot; to Int::class.java,&#10;                &quot;length&quot; to Double::class.java&#10;        )&#10;&#10;        clazz.assertHasProperties(properties)&#10;&#10;        clazz.assertHasConstructorParam(&#10;                String::class.java,&#10;                Int::class.java,&#10;                Double::class.java&#10;        )&#10;&#10;    }&#10;&#10;}&#10;&#10;fun getClass(className: String): Class&lt;*&gt;? {&#10;    return try {&#10;        Class.forName(className, false, Test::class.java.classLoader)!!&#10;    } catch (e: ClassNotFoundException) {&#10;        null&#10;    }&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasConstructorParam(vararg args: Class&lt;out Any&gt;) {&#10;    try {&#10;        this.getConstructor(*args)&#10;    } catch (e: Exception) {&#10;        val constructor = args.joinToString { arg -&gt; arg.simpleName }&#10;        Assert.fail(&quot;Mistake in class ${this.simpleName}: Missing the required constructor ($constructor)&quot;)&#10;    }&#10;}&#10;&#10;fun Class&lt;*&gt;.assertIsDataClass() {&#10;    val kClazz = this.kotlin&#10;    Assert.assertTrue(&quot;Mistake in class ${this.simpleName}: Missing the required data class keyword&quot;, kClazz::isData.get())&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasProperties(properties: Map&lt;String, Class&lt;*&gt;&gt;) {&#10;    properties.iterator().forEach {&#10;        assertHasProperty(it.key, it.value)&#10;    }&#10;&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasProperty(valName: String, retType: Class&lt;*&gt;) {&#10;    val firstChar = valName[0].toUpperCase()&#10;    val restOfVal = valName.substring(1)&#10;&#10;    val getMethod = &quot;get${firstChar}${restOfVal}&quot;&#10;    try {&#10;        val method = this.getMethod(getMethod)!!&#10;        if (!retType.isAssignableFrom(method.returnType)) {&#10;            Assert.fail(&quot;Mistake in class ${this.simpleName}: Property \&quot;${valName}\&quot; is of type ${method.returnType}. Should be ${retType}&quot;)&#10;        }&#10;    } catch (e: Exception) {&#10;        Assert.fail(&quot;Mistake in class ${this.simpleName}: Can't see any \&quot;${valName}\&quot; property. Did you forget to add 'var' or 'val'?&quot;)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543870916000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Import clash&lt;/h1&gt;&#10;&lt;p&gt;Importing classes with the same name is not allowed in Kotlin.&#10;    One way we can work around this issue is by omitting the import statement clashing class.&#10;    Problem with this approach is that the we have refer to the full path of the clashing class when declaring it.&lt;/p&gt;&#10;&lt;p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;   import some.long.packagename.a.Foobar&#10;&#10;   val fooBar : FooBar = FooBar()&#10;   val fooBarB : some.long.packagename.b.FooBar = some.long.packagename.b.FooBar()&#10;      &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;/p&gt;&#10;&lt;p&gt;Luckily there is a way to import multiple classes with the same name without causing compilation error.&#10;    In case of ambiguity we can use the keyword &lt;b&gt;as&lt;/b&gt; to locally rename the clashing entity:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;   import some.long.packagename.a.Foobar&#10;   import some.long.packagename.b.Foobar as FoobarB&#10;&#10;   val fooBar : FooBar = FooBar()&#10;   val fooBarB : FoobarB = FooBarB()&#10;      &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;Add a function named &lt;b&gt;mapToInternalCustomer&lt;/b&gt; to the &lt;b&gt;CustomerMapper&lt;/b&gt; class.&#10;    This function will take a &lt;b&gt;domain.external.Customer&lt;/b&gt; as a argument and returns a&#10;    &lt;b&gt;domain.internal.Customer&lt;/b&gt; with the same &lt;b&gt;name&lt;/b&gt; and &lt;b&gt;id&lt;/b&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;To improve readability, rename &lt;b&gt;domain.external.Customer&lt;/b&gt; to &lt;b&gt;ExternalCustomer&lt;/b&gt; by using the &lt;b&gt;as&lt;/b&gt;&#10;    keyword.&lt;/p&gt;&#10;&#10;&lt;p&gt;For more information, read the section about &lt;a href=https://kotlinlang.org/docs/reference/packages.html#getFooBar&quot;&gt;Imports&lt;/a&gt;.&lt;/p&gt;&#10;&lt;p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548542" />
                            <option name="index" value="8" />
                            <option name="name" value="Imports" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/domain/internal/Customer.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/domain/internal/Customer.kt" />
                                      <option name="text" value="package domain.internal&#10;&#10;data class Customer(val name: String, val id: String)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="29" />
                                                <option name="offset" value="62" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="116" />
                                            <option name="offset" value="113" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement here the solution" />
                                            <option name="possibleAnswer" value="    fun mapToInternalCustomer(externalCustomer: domain.external.Customer) =&#10;            Customer(externalCustomer.name, externalCustomer.id)&#10;" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="import domain.internal.Customer&#10;&#10;open class CustomerMapper {&#10;&#10;//implement here the solution&#10;&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/domain/external/Customer.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/domain/external/Customer.kt" />
                                      <option name="text" value="package domain.external&#10;&#10;data class Customer(val name: String, val id: String)" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import domain.internal.Customer&#10;import org.junit.Assert&#10;import org.junit.Test&#10;import kotlin.reflect.jvm.kotlinFunction&#10;import domain.external.Customer as externalCustomer&#10;&#10;class Test {&#10;&#10;    private val mapToInternalCustomerMethodName = &quot;mapToInternalCustomer&quot;&#10;&#10;    @Test&#10;    fun testSolution() {&#10;&#10;        val clazz = CustomerMapper::class.java&#10;&#10;        clazz.assertHasFunction(mapToInternalCustomerMethodName, Customer::class.java, externalCustomer::class.java)&#10;&#10;        val expectedCustomer = Customer(&quot;James Bond&quot;, &quot;007&quot;)&#10;        val argument = externalCustomer(&quot;James Bond&quot;, &quot;007&quot;)&#10;&#10;        clazz.assertCanCallMapToInternalCustomer(argument, expectedCustomer)&#10;    }&#10;&#10;    private fun Class&lt;*&gt;.assertCanCallMapToInternalCustomer(customer: externalCustomer, expectedCustomer: Customer) {&#10;&#10;        val kotlinFunction = this.getMethod(mapToInternalCustomerMethodName, customer::class.java).kotlinFunction&#10;        try {&#10;&#10;            val any = kotlinFunction?.call(CustomerMapper(), customer)&#10;            Assert.assertEquals(any, expectedCustomer)&#10;&#10;        } catch (e: Exception) {&#10;            Assert.fail(&quot;$mapToInternalCustomerMethodName is implemented incorrectly.&quot;)&#10;        }&#10;&#10;    }&#10;&#10;&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasFunction(functionName: String, retType: Class&lt;*&gt;, vararg paramTypes: Class&lt;out Any&gt;) {&#10;&#10;    try {&#10;        val method = this.getMethod(functionName, *paramTypes)&#10;        if (method?.returnType != retType) {&#10;            throw java.lang.RuntimeException()&#10;        }&#10;    } catch (ex: java.lang.Exception) {&#10;        Assert.fail(&quot;&quot;&quot;Mistake in class ${this.simpleName}: Cannot find a function with the name &quot;$functionName&quot;. If you are sure you have a function with this name, please check its signature.&quot;&quot;&quot;)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1556970976000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&#10;&lt;h1&gt;Control Flow&lt;/h1&gt;&#10;&#10;&lt;p&gt;There are several mechanisms for controlling the flow of your application:&#10;&lt;ul&gt;&#10;    &lt;li&gt;if&lt;/li&gt;&#10;    &lt;li&gt;when&lt;/li&gt;&#10;    &lt;li&gt;for&lt;/li&gt;&#10;    &lt;li&gt;while&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;h2&gt;If&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Just your classic if statement. Kotlin does &lt;b&gt;not&lt;/b&gt; support ternary operators (&lt;b&gt;condition ? then : else&lt;/b&gt;). An example:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    if( someTest() ) {&#10;        println(&quot;Test successful&quot;)&#10;    } else {&#10;        println(&quot;Test failed&quot;)&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&#10;&lt;h2&gt;When&lt;/h2&gt;&#10;&lt;p&gt;&#10;    The &lt;b&gt;when&lt;/b&gt; expression replaces the commonly used 'switch' statement.&#10;    It looks as following:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    when (myValue) {&#10;        1 -&gt; print(&quot;myValue is 1&quot;)&#10;        2 -&gt; print(&quot;myValue is 2&quot;)&#10;        else -&gt; { // Note the block&#10;            print(&quot;myValue is neither&quot;)&#10;        }&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    You can use arbitrary expressions, not just constants, as branch conditions.&#10;    For example:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    when (myObject) {&#10;        is Car -&gt; print(&quot;myObject is a Car&quot;)&#10;        is Plane -&gt; print(&quot;myObject is a Plane&quot;)&#10;        else -&gt; { // Note the block&#10;            print(&quot;myObject is an UFO&quot;)&#10;        }&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;&#10;&lt;p&gt;&#10;    When matches each condition in order and executes the first one that matches.&#10;    If none match, &lt;code&gt;else&lt;/code&gt; is executed.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;For&lt;/h2&gt;&#10;&lt;p&gt;&#10;    A for loop can range over anything that provides an iterator (collections and such).&#10;    Example of a for loop:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    for (someVal in myCollection) {&#10;       println(someVal)&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    The code block is optional if it contains only one expression.&#10;&lt;/p&gt;&#10;&#10;&lt;b&gt;Ranges&lt;/b&gt;&#10;&#10;&lt;p&gt;&#10;    To iterate over a range of numbers, you can use a range expression. E.g.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    for (i in 1..10) {&#10;       println(i)&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;This prints 1 to 10 (including 10)&lt;/p&gt;&#10;&lt;p&gt;For more about ranges, read this &lt;a href=&quot;https://kotlinlang.org/docs/reference/ranges.html&quot;&gt;Kotlin reference&lt;/a&gt;&lt;/p&gt;&#10;&#10;&#10;&lt;h2&gt;While&lt;/h2&gt;&#10;&lt;p&gt;Another classic. The while loop. Kotlin supports as well &lt;code&gt;while&lt;/code&gt; as &lt;code&gt;do ... while&lt;/code&gt;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    while( x &gt; 0 ){&#10;        x--&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    do {&#10;        y--&#10;    } while (y &gt;0)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Break/Continue&lt;/h2&gt;&#10;&lt;p&gt;&#10;    And Kotlin supports the age-old &lt;code&gt;break&lt;/code&gt; and &lt;code&gt;continue&lt;/code&gt; operators in loops, to either&#10;    abort the loop, or start the next iteration respectively.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Complete the &lt;code&gt;collectGarbage()&lt;/code&gt; method so that it&#10;    counts the Garabage and stores the values in the corresponding fields of the &lt;code&gt;GarbageCollector&lt;/code&gt; class.&#10;    The categorization is as follows&#10;&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;recyclable = Plastic and Glass&lt;/li&gt;&#10;    &lt;li&gt;organic = Green&lt;/li&gt;&#10;    &lt;li&gt;burnables = Paper&lt;/li&gt;&#10;    &lt;li&gt;chemicals = Chemicals,Oil and Batteries&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;Note: &lt;code&gt;List&amp;lt;Garbage&amp;gt;&lt;/code&gt; is an iterable over Garbage.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;For more information about Control Flow read the &lt;a href=&quot;http://kotlinlang.org/docs/reference/control-flow.html#control-flow-if-when-for-while&quot;&gt;Kotlin reference&lt;/a&gt;&lt;/p&gt;&#10;&#10;&#10;&#10;&#10;&lt;/html&gt;&#10;&#10;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548543" />
                            <option name="index" value="9" />
                            <option name="name" value="Control Flow" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="14" />
                                                <option name="offset" value="168" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="373" />
                                            <option name="offset" value="168" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement me" />
                                            <option name="possibleAnswer" value=" for( item in garbage){&#10;            when(item){&#10;                is Plastic, is Glass  -&gt; recyclable++&#10;                is Green -&gt; organic++&#10;                is Paper -&gt; burnables++&#10;                is Chemicals, is Oil, is Batteries -&gt; chemicals++&#10;            }&#10;       }" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class GarbageCollector {&#10;    var organic = 0&#10;    var recyclable = 0&#10;    var chemicals = 0&#10;    var burnables = 0&#10;&#10;    fun collectGarbage(garbage: List&lt;Garbage&gt;) {&#10;      //implement me&#10;    }&#10;&#10;}&#10;&#10;interface Garbage {&#10;    val collectible: Boolean&#10;}&#10;&#10;data class Plastic(override val collectible: Boolean = true) : Garbage&#10;data class Green(override val collectible: Boolean = true) : Garbage&#10;data class Paper(override val collectible: Boolean = false) : Garbage&#10;data class Glass(override val collectible: Boolean = true) : Garbage&#10;data class Chemicals(override val collectible: Boolean = false) : Garbage&#10;data class Oil(override val collectible: Boolean = false) : Garbage&#10;data class Batteries(override val collectible: Boolean = true) : Garbage&#10;&#10;&#10;&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;import GarbageCollector as GC&#10;&#10;class Test {&#10;    @Test&#10;    fun garbageTest() {&#10;&#10;        GC().apply {&#10;            collectGarbage(&#10;                    listOf(Green(),&#10;                            Batteries(),&#10;                            Oil(),&#10;                            Plastic(),&#10;                            Glass(),&#10;                            Chemicals(),&#10;                            Paper()&#10;                    ))&#10;        }.run {&#10;            assertEquals(&quot;Count of recyclables incorrect&quot;, 2, recyclable)&#10;            assertEquals(&quot;Count of burnables incorrect&quot;, 1, burnables)&#10;            assertEquals(&quot;Count of chemicals incorrect&quot;, 3, chemicals)&#10;            assertEquals(&quot;Count of organic incorrect&quot;, 1, organic)&#10;        }&#10;&#10;        GC().apply {&#10;            collectGarbage(&#10;                    listOf(&#10;                            Batteries(),&#10;                            Batteries(),&#10;                            Batteries()&#10;                    ))&#10;        }.run {&#10;            assertEquals(&quot;Count of recyclables incorrect&quot;, 0, recyclable)&#10;            assertEquals(&quot;Count of burnables incorrect&quot;, 0, burnables)&#10;            assertEquals(&quot;Count of chemicals incorrect&quot;, 3, chemicals)&#10;            assertEquals(&quot;Count of organic incorrect&quot;, 0, organic)&#10;        }&#10;&#10;        GC().apply {&#10;            collectGarbage(&#10;                    listOf(&#10;                    ))&#10;        }.run {&#10;            assertEquals(&quot;Count of recyclables incorrect&quot;, 0, recyclable)&#10;            assertEquals(&quot;Count of burnables incorrect&quot;, 0, burnables)&#10;            assertEquals(&quot;Count of chemicals incorrect&quot;, 0, chemicals)&#10;            assertEquals(&quot;Count of organic incorrect&quot;, 0, organic)&#10;        }&#10;    }&#10;&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755857000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;h1&gt;Nullable safety&lt;/h1&gt;&#10;&lt;p&gt;&#10;Kotlin's type system is aimed at eliminating the danger of null references from code, also known as the The Billion Dollar Mistake.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;h2&gt;Nullable types&lt;/h2&gt;&#10;&lt;p&gt;&#10;    In kotlin  the type system distinguishes between references that can hold null (&lt;b&gt;nullable references&lt;/b&gt;) and those that can not.&#10;It does by adding a &lt;b&gt;question mark(?)&lt;/b&gt; to the type&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Example:&#10;    &lt;pre&gt;&lt;code&gt;&#10;    var a: String = &quot;abc&quot;&#10;    a = null // compilation error&#10;    val l = a.length // no problem&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;&#10;    To allow nulls, we can declare a variable as nullable string, written String?:&#10;    &lt;pre&gt;&lt;code&gt;&#10;    var b: String? = &quot;abc&quot;&#10;    b = null // ok&#10;    val l = b.length // ERROR: b could be null&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Null checks&lt;/h2&gt;&#10;&lt;p&gt;&#10;    If you have a nullable reference, you can't use its properties or methods without checking&#10;    wether or not the reference is null beforehand. This can be done in various ways.&#10;&lt;/p&gt;&#10;&lt;b&gt;Classic if-else&lt;/b&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;val l = if (b != null) b.length else -1&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;b&gt;Safe calls&lt;/b&gt;&#10;&lt;p&gt;The second option is the safe call operator, written &lt;b&gt;?.&lt;/b&gt;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;b?.length&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;If b is not null, it will return the value of length, otherwise it will return null.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;You can also combine this together with &lt;b&gt;let&lt;/b&gt; to have a method only execute if a reference&#10;    is not null.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;myString?.let { println(it.length) } // prints the length of the string if it exists&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    You can also use it on the assignment side: only assign something it the reference is not null&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;person?.department?.head = &quot;John&quot;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&#10;&lt;b&gt;Elvis Operator&lt;/b&gt;&#10;&#10;&lt;p&gt;&#10;    Instead of saying&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;val l: Int = if (b != null) b.length else -1&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    You can shorten it to :&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;val l = b?.length ?: -1&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;b&gt;Not-Null Assertion (!!)&lt;/b&gt;&#10;&#10;&lt;p&gt;&#10;    You can force a NullPointerException (NPE) if a reference is null, by using the &lt;b&gt;!!&lt;/b&gt; operator&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;val x=y!!.length&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;This will throw a NPE if y is null. Use this very sparingly.&lt;/p&gt;&#10;&#10;&lt;b&gt;Safe Casts&lt;/b&gt;&#10;&lt;p&gt;When using safe casts, the operation will return null if the cast fails: &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;val aInt: Int? = a as? Int&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;Rewrite the body of &lt;code&gt;sendMessageToClient()&lt;/code&gt; so it will contain only a single if statement.&lt;/p&gt;&#10;&#10;&lt;p&gt;Read the full manual at &lt;a href=&quot;http://kotlinlang.org/docs/reference/null-safety.html&quot;&gt;kotlin docs&lt;/a&gt;&#10;&lt;/p&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548544" />
                            <option name="index" value="10" />
                            <option name="name" value="Nullable Types" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class Client( val personalInfo: PersonalInfo? )&#10;&#10;class PersonalInfo( val email: String? )&#10;&#10;interface Mailer {&#10;    fun sendMessage(email: String, message: String)&#10;}&#10;&#10;&#10;fun sendMessageToClient(&#10;        client: Client?, message: String?, mailer: Mailer&#10;){&#10;    if (client == null || message == null) return&#10;&#10;    val personalInfo = client.personalInfo&#10;    if (personalInfo == null) return&#10;&#10;&#10;    val email = personalInfo.email&#10;    if( email == null ) return&#10;&#10;    mailer.sendMessage(email, message)&#10;}&#10;&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Test&#10;import org.junit.Assert&#10;&#10;class TestNullableTypes {&#10;    fun testSendMessageToClient(&#10;            client: Client?,&#10;            message: String?,&#10;            expectedEmail: String? = null,&#10;            shouldBeInvoked: Boolean = false&#10;    ) {&#10;        var invoked = false&#10;        val expectedMessage = message&#10;        sendMessageToClient(client, message, object : Mailer {&#10;            override fun sendMessage(email: String, message: String) {&#10;                invoked = true&#10;                Assert.assertEquals(&quot;The message is not as expected:&quot;,&#10;                        expectedMessage, message)&#10;                Assert.assertEquals(&quot;The email is not as expected:&quot;,&#10;                        expectedEmail, email)&#10;            }&#10;        })&#10;        Assert.assertEquals(&quot;The function 'sendMessage' should${if (shouldBeInvoked) &quot;&quot; else &quot;n't&quot;} be invoked&quot;,&#10;                shouldBeInvoked, invoked)&#10;    }&#10;&#10;    @Test fun everythingIsOk() {&#10;        testSendMessageToClient(Client(PersonalInfo(&quot;bob@gmail.com&quot;)),&#10;                &quot;Hi Bob! We have an awesome proposition for you...&quot;,&#10;                &quot;bob@gmail.com&quot;,&#10;                true)&#10;    }&#10;&#10;    @Test fun noMessage() {&#10;        testSendMessageToClient(Client(PersonalInfo(&quot;bob@gmail.com&quot;)), null)&#10;    }&#10;&#10;    @Test fun noEmail() {&#10;        testSendMessageToClient(Client(PersonalInfo(null)), &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;&#10;    @Test fun noPersonalInfo() {&#10;        testSendMessageToClient(Client(null), &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;&#10;    @Test fun noClient() {&#10;        testSendMessageToClient(null, &quot;Hi Bob! We have an awesome proposition for you...&quot;)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755858000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Platform types&lt;/h1&gt;&#10;&lt;p&gt;Any reference in Java may be null, which makes Kotlin's requirements of strict null-safety impractical for objects coming from Java.&#10;    Types of Java declarations are treated specially in Kotlin and called &lt;b&gt;platform types. &lt;/b&gt;&lt;/p&gt;&#10;&lt;p&gt;A platform type is indicated by IntelliJ with an &lt;b&gt;exlamation mark (!)&lt;/b&gt;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    When you receive a reference from a java call, you can choose to treat it as a nullable or non-nullable.&#10;    When you assign the reference to a non-nullable variable, an assertion will take place.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    For example:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;    val resultA = someJavaCall() //result is a platform type&#10;&#10;    resultA.someMethod() //throws NullPointerException if resultA is null&#10;&#10;    val resultB:String = someJavaCall() //will throw IllegalStateException if result is null&#10;    val resultC:String? = someJavaCall() //result is considered a nullable reference&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;Create a wrapper for the Java &lt;code&gt;receiveMail&lt;/code&gt; method. Make sure it never returns null, but an&#10;empty list at best.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Note: to create an empty list, use &lt;code&gt;listOf()&lt;/code&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;Read the full manual at &lt;a href=&quot;https://kotlinlang.org/docs/reference/java-interop.html&quot;&gt;kotlin docs&lt;/a&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548545" />
                            <option name="index" value="11" />
                            <option name="name" value="Nullable Types - from java" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/JavaMailer.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/JavaMailer.java" />
                                      <option name="text" value="import java.util.List;&#10;&#10;public interface JavaMailer {&#10;&#10;    List&lt;Mail&gt; receiveMail();&#10;&#10;}&#10;&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Mail.java">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Mail.java" />
                                      <option name="text" value="public class Mail {&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="17" />
                                                <option name="offset" value="94" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="4" />
                                            <option name="offset" value="137" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Wrap the method" />
                                            <option name="possibleAnswer" value="return mailer.receiveMail()?: listOf()" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class MailWrapper(private val mailer:JavaMailer){&#10;&#10;    fun receiveMail():List&lt;Mail&gt; {&#10;        //Wrap the method&#10;    }&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class Test {&#10;&#10;    @Test&#10;    fun shouldHandleNull() {&#10;        val mailer = JavaMailer { null }&#10;&#10;        val mailWrapper = MailWrapper(mailer)&#10;&#10;        val mails = mailWrapper.receiveMail()&#10;&#10;        assertTrue(&quot;Should be an empty list&quot;, mails.isEmpty())&#10;    }&#10;&#10;&#10;    @Test&#10;    fun shouldHandleAList() {&#10;        val mailer = JavaMailer { listOf(Mail()) }&#10;&#10;        val mailWrapper = MailWrapper(mailer)&#10;&#10;        val mails = mailWrapper.receiveMail()&#10;&#10;        assertTrue(&quot;There should be a mail&quot;, mails.size == 1 )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755859000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192981" />
                      <option name="index" value="2" />
                      <option name="name" value="Functions and Lambdas" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1556970977000" />
                      <option name="unitId" value="167436" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Functions&lt;/h1&gt;&#10;&lt;p&gt;&#10;Functions in Kotlin are first-class citizens. This means it can be passed as an argument, returned from a function, modified&#10;and assigned to a variable.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Functions are declared using the &lt;b&gt;&lt;code&gt;fun&lt;/code&gt;&lt;/b&gt; keyword. Functions that are defined inside a class or object&#10;    are called &lt;b&gt;member functions&lt;/b&gt;. Values are returned using the &lt;b&gt;&lt;code&gt;return&lt;/code&gt;&lt;/b&gt; keyword.&#10;    An example:&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;   &lt;pre&gt; &lt;code&gt;&#10;        fun add(left: Int, right: Int): Int {&#10;            return left + right&#10;        }&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;This is a method accepting two parameters, 'left' and 'right', each of the type Int. It also indicates that&#10;it will return an Int.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Arguments&lt;/h2&gt;&#10;&#10;&#10;&lt;b&gt;Named Arguments&lt;/b&gt;&#10;&#10;&lt;p&gt;&#10;    When calling functions, the arguments can be named. e.g, instead of calling&lt;br/&gt;&#10;    &lt;pre&gt;&lt;code&gt;add( 12, 15 )&lt;/code&gt;&lt;/pre&gt;&#10;    you can call&#10;    &lt;pre&gt;&lt;code&gt;add( left=12, right=15 )&lt;/code&gt;&lt;/pre&gt;&#10;    or&#10;    &lt;pre&gt;&lt;code&gt;add(  right=15, left=12 )&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;b&gt;Default arguments&lt;/b&gt;&#10;&lt;p&gt;&#10;    Default arguments can be defined using the &lt;b&gt;=&lt;/b&gt; after the type along with the value. e.g. &lt;code&gt;fun add(left:Int, right:Int = 0 )&lt;/code&gt; will&#10;    allow you to use the add function without a second argument. If done so, the second argument will have the value &lt;code&gt;0&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;b&gt;Variable number of arguments&lt;/b&gt;&#10;&#10;&lt;p&gt;&#10;    A function can have a variable number of arguments, using the &lt;b&gt;&lt;code&gt;vararg&lt;/code&gt;&lt;/b&gt; keyword.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;    fun asList(vararg messages:String): List&amp;lt;String&amp;gt; {&#10;    val result = ArrayList&amp;lt;String&amp;gt;()&#10;    for (body in messages) //messages is an Array&#10;        result.add(body)&#10;    return result&#10;}&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    Inside the function, the vararg parameter is seen as an &lt;b&gt;array&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    &lt;b&gt;Note: &lt;/b&gt; if a vararg is not the &lt;b&gt;last&lt;/b&gt; argument in the list, arguments&#10;    following it, can be passed by name&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Create a function &lt;code&gt;add()&lt;/code&gt; that takes a variable number of arguments, and&#10;    adds only those that are even. Subsequently returning the sum.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    For the documentation regarding functions see &lt;a href=&quot;https://kotlinlang.org/docs/reference/functions.html&quot;&gt;here&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548546" />
                            <option name="index" value="1" />
                            <option name="name" value="Functions" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="31" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="217" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement add() function here" />
                                            <option name="possibleAnswer" value="fun add(vararg numbers:Int):Int{&#10;    var sum = 0&#10;&#10;    for( i in numbers ){&#10;        if( i%2 == 0 ) {&#10;            sum += i&#10;        }&#10;    }&#10;&#10;    return sum&#10;}" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="//implement add() function here&#10;&#10;/**&#10; * main method to play with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;    //println( add(1,2,3,4) )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        var input = arrayOf(-3, -1, 0, 1, 3, 5, 7, 9, 11)&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                0,&#10;                add(*input.toIntArray())&#10;        )&#10;&#10;        input = arrayOf(-3, -1, 0, 1, 2, 3, 5, 7, 9, 11)&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                2,&#10;                add(*input.toIntArray())&#10;        )&#10;&#10;        input = arrayOf(-4, -3, -1, 0, 1, 2, 3, 5, 7, 9, 11, 12)&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                10,&#10;                add(*input.toIntArray())&#10;        )&#10;&#10;&#10;        input = arrayOf()&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                0,&#10;                add(*input.toIntArray())&#10;        )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755861000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Lambdas&lt;/h1&gt;&#10;&lt;p&gt;&#10;    Lambda expressions are function literals. This means they are not declared,&#10;    but passed immediately as an expression. An example of a function call with a lambda:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;    max( strings, { a, b -&gt; a.length &lt; b.length } )&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    In this example, the lambda is the second argument of the max function; the part that says:&lt;br/&gt;&#10;    &lt;code&gt;{ a, b -&gt; a.length &lt; b.length }&lt;/code&gt; &lt;br/&gt;&#10;    This expression takes two arguments, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, which are inferred to be strings, and&#10;    returns &lt;code&gt;true&lt;/code&gt; if b is longer than a.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Syntax&lt;/h2&gt;&#10;&lt;p&gt;&#10;    A lambda expression is&#10;    &lt;ul&gt;&#10;    &lt;li&gt;always surrounded by curly braces,&lt;/li&gt;&#10;    &lt;li&gt;parameter declarations in the full syntactic form go inside curly braces and have optional type annotations,&lt;/li&gt;&#10;    &lt;li&gt;the body goes after an &lt;code&gt;-&amp;gt;&lt;/code&gt; sign.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;And if the inferred return type of the lambda is not &lt;code&gt;Unit&lt;/code&gt;, the last (or possibly single) expression inside the lambda body is treated as the return value.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    If your lambda has a single parameter, you can refer to it as &lt;b&gt;it&lt;/b&gt;. E.g.&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;    { a:String -&gt; it.length }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    If a lambda parameter is unused, you can use the &lt;code&gt;_&lt;/code&gt;. For example,&#10;    we can change the first example:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;     max( strings, { _, b -&gt; b.length == 12} )&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    &lt;b&gt;Note: &lt;/b&gt; this would be a &lt;b&gt;terrible&lt;/b&gt; max function call.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    You can read more about this in the &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions&quot;&gt;Kotlin reference&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Same as the previous assignment, however, now use the &lt;code&gt;Array.filter()&lt;/code&gt; (See &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-array/index.html&quot;&gt;Array kotlin doc&lt;/a&gt;) method and pass a lambda to it. It might also be interesting to look at the &lt;code&gt;.forEach()&lt;/code&gt; function.&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548547" />
                            <option name="index" value="2" />
                            <option name="name" value="Lambda" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun add(vararg numbers:Int):Int{&#10;    var sum = 0&#10;&#10;    for( i in numbers ){&#10;        if( i%2 == 0 ) {&#10;            sum += i&#10;        }&#10;    }&#10;&#10;    return sum&#10;}&#10;&#10;/**&#10; * main method to play with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;    //println( add(1,2,3,4) )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        var input = arrayOf(-3, -1, 0, 1, 3, 5, 7, 9, 11)&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                0,&#10;                add(*input.toIntArray())&#10;        )&#10;&#10;        input = arrayOf(-3, -1, 0, 1, 2, 3, 5, 7, 9, 11)&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                2,&#10;                add(*input.toIntArray())&#10;        )&#10;&#10;        input = arrayOf(-4, -3, -1, 0, 1, 2, 3, 5, 7, 9, 11, 12)&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                10,&#10;                add(*input.toIntArray())&#10;        )&#10;&#10;&#10;        input = arrayOf()&#10;        assertEquals(&#10;                &quot;&quot;&quot;Failed with input: ${input.asList()}&quot;&quot;&quot;,&#10;                0,&#10;                add(*input.toIntArray())&#10;        )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755861000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Infix functions&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    Example of the usage of an infix function looks like this:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;    myDog eats &quot;munchies&quot;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    &lt;b&gt;eats&lt;/b&gt; is in this example an infix function. It is a member function of &lt;b&gt;myDog&lt;/b&gt; and&#10;    receives one argument &lt;b&gt;&quot;munchies&quot;&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    An infix function is a function that&#10;    &lt;ul&gt;&#10;    &lt;li&gt;Is either a member function or extension function&lt;/li&gt;&#10;    &lt;li&gt;Has a single parameter&lt;/li&gt;&#10;    &lt;li&gt;The parameter is &lt;b&gt;not&lt;/b&gt; a &lt;b&gt;vararg&lt;/b&gt; nor has a &lt;b&gt;default value&lt;/b&gt;&lt;/b&gt;&lt;/li&gt;&#10;&lt;/ul&gt;&#10;(Extension functions will be discussed later on)&lt;br/&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    To define the infix function above, you would do the following:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code  data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    class Dog{&#10;        infix fun eats(food:String) = println(&quot;Eating $food&quot;)&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    By preceding the function with the keyword &lt;b&gt;infix&lt;/b&gt; and can be used as an infix function.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    An example of an infix function that is already present within Kotlin would be the &lt;b&gt;to&lt;/b&gt; function (used for example when creating a Map) : &lt;br/&gt;&#10;    &lt;code  data-lang=&quot;text/x-kotlin&quot;&gt; &quot;a&quot; to 7&lt;/code&gt;&lt;br/&gt;&#10;    This will call a &lt;b&gt;to()&lt;/b&gt; method on &lt;b&gt;String&lt;/b&gt; to produce a &lt;b&gt;Pair&lt;/b&gt; object containing &quot;a&quot; and 7. (This also involves extension functions and generics)&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Read more at this &lt;a href=&quot;https://kotlinlang.org/docs/reference/functions.html#infix-notation&quot;&gt;Kotlin reference&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&#10;Create a class &lt;b&gt;MyNum&lt;/b&gt; that has&#10;&lt;ul&gt;&#10;    &lt;li&gt;A &lt;b&gt;Int&lt;/b&gt; value passed in its constructor&lt;/li&gt;&#10;    &lt;li&gt;An &lt;b&gt;infix&lt;/b&gt; method &lt;b&gt;add&lt;/b&gt; accepting an integer, which returns the sum of the class value and the parameter&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;br&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548548" />
                            <option name="index" value="3" />
                            <option name="name" value="Infix" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="33" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="112" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Implement MyNum with infix here" />
                                            <option name="possibleAnswer" value="class MyNum(private val value:Int){&#10;    infix fun add(other:Int) = value + other&#10;}" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="//Implement MyNum with infix here&#10;&#10;&#10;/**&#10; * Main method to play with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;//     val someNumber = MyNum(4345)&#10;//     println( someNumber add 4 )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import junit.framework.AssertionFailedError&#10;import org.junit.Assert.assertEquals&#10;import org.junit.Assert.fail&#10;import org.junit.Test&#10;import kotlin.reflect.KClass&#10;import kotlin.reflect.KFunction&#10;import kotlin.reflect.full.functions&#10;&#10;class Test {&#10;&#10;    @Test&#10;    fun `test class and members`() {&#10;        val myNumClass = getClass(className = &quot;MyNum&quot;)&#10;                ?: throw AssertionFailedError(&quot;&quot;&quot;Please create a class named &quot;MyNum&quot; &quot;&quot;&quot;)&#10;&#10;        myNumClass.assertHasConstructorParam(Int::class.java)&#10;//        myNumClass.assertHasPrivateProperty(&quot;value&quot;, Int::class)&#10;        myNumClass.assertInfixAddFunctionCall(&quot;add&quot;, Int::class, Int::class)&#10;    }&#10;&#10;    private fun Class&lt;*&gt;.assertInfixAddFunctionCall(functionName: String, param: KClass&lt;*&gt;, returnType: KClass&lt;*&gt;) {&#10;&#10;        val function = getInfixFunction(functionName, param, returnType)&#10;&#10;        val inValue = 12&#10;&#10;        val newInstance = getMyEnumInstance(this, inValue)&#10;&#10;        assertEquals(&#10;                &quot;Failed on input: $inValue&quot;,&#10;                24,&#10;                function.call(newInstance, 12)&#10;        )&#10;&#10;&#10;        assertEquals(&#10;                &quot;Failed on input: $inValue&quot;,&#10;                12,&#10;                function.call(newInstance, 0)&#10;        )&#10;&#10;        assertEquals(&#10;                &quot;Failed on input: $inValue&quot;,&#10;                9,&#10;                function.call(newInstance, -3)&#10;        )&#10;&#10;    }&#10;&#10;}&#10;&#10;&#10;private fun Class&lt;*&gt;.getInfixFunction(functionName: String, param: KClass&lt;*&gt;, returnType: KClass&lt;*&gt;): KFunction&lt;*&gt; = this.kotlin.functions.firstOrNull {&#10;    functionName == it.name &amp;&amp; param == it.parameters[1].type.classifier &amp;&amp; it.isInfix &amp;&amp; returnType == it.returnType.classifier&#10;}&#10;        ?: throw AssertionFailedError(&quot;&quot;&quot;Couldn't find infix function &quot;add&quot; with the expected signature in class &quot;${this.simpleName}&quot;.&quot;&quot;&quot;)&#10;&#10;&#10;private fun Class&lt;*&gt;.assertHasPrivateProperty(field: String, returnType: KClass&lt;Int&gt;) {&#10;&#10;    try {&#10;        val declaredField = this.getDeclaredField(field)&#10;        val type = declaredField.type.name&#10;        if (type != returnType.java.simpleName) {&#10;            fail(&quot;Mistake in class ${this.simpleName}; missing property `$field` with type `$type` &quot;)&#10;        }&#10;    } catch (e: Exception) {&#10;        fail(&quot;Mistake in class ${this.simpleName}; missing property with name&quot;)&#10;    }&#10;}&#10;&#10;private fun getMyEnumInstance(clazz: Class&lt;*&gt;, inValue: Int) =&#10;        clazz.getConstructor(Int::class.java).newInstance(inValue)&#10;&#10;&#10;fun getClass(className: String): Class&lt;*&gt;? {&#10;    return try {&#10;        Class.forName(className, false, Test::class.java.classLoader)!!&#10;    } catch (e: ClassNotFoundException) {&#10;        null&#10;    }&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasConstructorParam(vararg args: Class&lt;out Any&gt;) {&#10;    try {&#10;        this.getConstructor(*args)&#10;    } catch (e: Exception) {&#10;        val constructor = args.joinToString { arg -&gt; arg.simpleName }&#10;        fail(&quot;Mistake in class ${this.simpleName}: Missing the required constructor ($constructor)&quot;)&#10;    }&#10;}&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1556970977000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Higher Order Functions&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    Higher order functions (&lt;b&gt;HOF&lt;/b&gt;), is an expensive way of saying &lt;blockquote&gt;A function that has a function as a parameter&lt;/blockquote&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Since functions are first-class citizens in Kotlin, you can pass functions around as parameters.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Just as a regular parameter: to have a function as a parameter, you have to define its type.&#10;    The type of a function is defined in the following form:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    (A , B) -&amp;gt; C&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    This specifies the signature of the expected function. Between parentheses, you specify its parameter types (&lt;b&gt;A&lt;/b&gt; and &lt;b&gt;B&lt;/b&gt;). After the &lt;b&gt;-&amp;gt;&lt;/b&gt; you define its return type (&lt;b&gt;C&lt;/b&gt;).&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Functions that have no parameters are specified using empty braces, e.g. &lt;b&gt;() -&amp;gt; C&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    Functions that have no return value are always specified with the type Unit, e.g. &lt;b&gt;(Int, Int) -&amp;gt; Unit&lt;/b&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    An example of a function definition of a higher order function:&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    fun theHoff( kittWristwatch: (String)-&gt;Boolean ){&#10;        println(&quot;Kitt, execute!&quot;)&#10;        val isSuccess = kittWristwatch(&quot;IncreaseSizeOfShark&quot;)&#10;&#10;        if( isSuccess ) {&#10;            println(&quot;Thanks Kitt!&quot;)&#10;        } else {&#10;            println(&quot;x⸑x&quot;)&#10;        }&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    So, theHoff is expected a function he calls 'kittWristwatch'. This function should expect&#10;    a String and should return a Boolean.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    A call to theHoff looks as follows&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    val brokenWristwatch:(String) -&gt; Boolean = { command:String -&gt;&#10;        println(&quot;Sorry, I can't do that Michael&quot;)&#10;        false&#10;    }&#10;&#10;    theHoff( brokenWristwatch )&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    Off course, this can be shortened by applying the lambda directly:&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;pre&gt;&lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;    theHoff{ command -&gt;&#10;        println(&quot;Sorry, I can't do that Michael&quot;)&#10;        false&#10;    }&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    &lt;b&gt;Notice the absence of braces.&lt;/b&gt; If the lambda is the only argument to that call, the parentheses can be omitted entirely.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You can read more about Kotlin HOF in the &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#higher-order-functions&quot;&gt;Kotlin reference&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&lt;p&gt;&#10;    Now for the assignment we want you to write a Stopwatch object.&#10;    The Stopwatch object has a method which will measure the execution time of a given function.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    It has the following requirements, it:&#10;&lt;/p&gt;&#10;&#10;&lt;ul&gt;&#10;    &lt;li&gt;is named &quot;elapse&quot;&lt;/li&gt;&#10;    &lt;li&gt;will execute the given function. The given function should not expect any parameters nor have any output (=Unit)&lt;/li&gt;&#10;    &lt;li&gt;will return the duration of that function&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;br&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548549" />
                            <option name="index" value="4" />
                            <option name="name" value="Higher order Functions" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value=" Use 'System.currentTimeMillis()' for getting the current time." />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="27" />
                                                <option name="offset" value="209" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="277" />
                                            <option name="offset" value="209" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement elapse function" />
                                            <option name="possibleAnswer" value="fun elapse(block: () -&gt; Unit): Long {&#10;        var start = System.currentTimeMillis()&#10;        block()&#10;        val end = System.currentTimeMillis() - start&#10;        println(&quot;end [$end] time&quot;)&#10;        return end&#10;    }" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="object Stopwatch {&#10;&#10;    /**&#10;     * Measures execution time in ms of a given callback&#10;     *&#10;     *  @param block the function to measure&#10;     *  @return time elapsed = end time - start time&#10;     *&#10;     */&#10;    //implement elapse function&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;&#10;    val init: (Int) -&gt; Int = { i -&gt; i * i }&#10;    val numbers = Array(100000, init)&#10;&#10;    Stopwatch.elapse { numbers.forEach { i -&gt; println(i) } }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;&#10;        val init: (Int) -&gt; Int = { i -&gt; i * i }&#10;        val numbers = Array(100000, init)&#10;&#10;        val elapse = Stopwatch.elapse { numbers.forEach { i -&gt; i } }&#10;&#10;        assertTrue(elapse in 1..9)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755863000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192982" />
                      <option name="index" value="3" />
                      <option name="name" value="Generics" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1543755866000" />
                      <option name="unitId" value="167437" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Explanation&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    As in Java, classes in Kotlin may have type parameters:&#10;&lt;/p&gt;&#10;&lt;code&gt;&#10;    class Box&amp;lt;T&amp;gt;(t: T) {&#10;    var value = t&#10;    }&#10;&lt;/code&gt;&#10;&lt;p&gt;&#10;    Here &lt;b&gt;T&lt;/b&gt; is the type parameter, indicating what type the argument t has.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    In general, to create an instance of such a class, we need to provide the type arguments:&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;code&gt;&#10;    val box: Box&amp;lt;Int&amp;gt; = Box&amp;lt;Int&amp;gt;(1)&#10;&lt;/code&gt;&#10;&lt;p&gt;&#10;    This creates a box that will have an Int in the &lt;code&gt;value&lt;/code&gt; field.&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    But if the parameters may be inferred, e.g. from the constructor arguments or by some other means, one is allowed to omit the type arguments:&#10;&lt;/p&gt;&#10;&#10;&lt;code&gt;&#10;    val box = Box(1) // 1 has type Int, so the compiler figures out that we are talking about Box&lt;Int&gt;&#10;&lt;/code&gt;&#10;&#10;&lt;p&gt;You can read more in the &lt;a href=&quot;https://kotlinlang.org/docs/reference/generics.html&quot;&gt;Kotlin reference&lt;/a&gt;.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;Create a generic &lt;b&gt;Transport&lt;/b&gt; class that takes as its constructor argument &lt;b&gt;goods&lt;/b&gt; of type object &lt;b&gt;T&lt;/b&gt;.&lt;/t&gt;&lt;/b&gt;&lt;/p&gt;&#10;&lt;p&gt;Following, finish the &lt;code&gt;catTransporter()&lt;/code&gt; function to return a &lt;code&gt;Transport&lt;/code&gt; with type &lt;code&gt;Cat&lt;/code&gt;&lt;/p&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548550" />
                            <option name="index" value="1" />
                            <option name="name" value="Generic Class" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list>
                                                <option value="Transport class" />
                                              </list>
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="18" />
                                                <option name="offset" value="1" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="32" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="Generic Class Here" />
                                            <option name="possibleAnswer" value="class Transport&lt;T&gt;(val goods:T)" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="25" />
                                                <option name="offset" value="64" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="53" />
                                            <option name="offset" value="92" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement this function" />
                                            <option name="possibleAnswer" value="= Transport(Cat())" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="&#10;Generic Class Here&#10;&#10;&#10;class Dog&#10;class Cat&#10;&#10;fun catTransporter() //implement this function&#10;&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.fail&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;&#10;        try {&#10;            val fishTransport = Transport&lt;Fish&gt;(Fish())&#10;        } catch (e: Exception) {&#10;            fail(&quot;Could not instantiate fishTransport&quot;)&#10;        }&#10;&#10;    }&#10;&#10;&#10;    @Test&#10;    fun testMethod(){&#10;        val catTransporter:Transport&lt;*&gt; = catTransporter()&#10;&#10;        if( catTransporter.goods !is Cat){&#10;            fail(&quot;catTransport is transporting : ${catTransporter.goods!!::class}&quot;)&#10;        }&#10;    }&#10;&#10;&#10;    private class Fish&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755865000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Generic functions&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    Generic types are not only for classes. Functions can have them too:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;    fun &amp;lt;T&amp;gt; doSomething(item: T): List&amp;lt;T&amp;gt;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    The function in the example has a generic type &lt;b&gt;T&lt;/b&gt;. The generic type is always defined&#10;    before the function name.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    When calling a generic function, you specify the type arguments &lt;b&gt;after&lt;/b&gt; the&#10;    name of the function, e.g.:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;    val myCat = Cat()&#10;    val myCatList = doSomething&amp;lt;Cat&amp;gt;( myCat )&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;You can read more at &lt;a href=&quot;https://kotlinlang.org/docs/reference/generics.html#generic-functions&quot;&gt;Kotlin reference&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;Create a function &lt;code&gt;isAPet( subject: T ):Boolean&lt;/code&gt;. It will return&#10;    &lt;b&gt;True&lt;/b&gt; if the subject is a Cat or Dog. &lt;b&gt;False&lt;/b&gt; otherwise.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    hint: check this &lt;a href=&quot;https://kotlinlang.org/docs/reference/typecasts.html&quot;&gt;Kotlin reference&lt;/a&gt;&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548551" />
                            <option name="index" value="2" />
                            <option name="name" value="Generic Functions" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="22" />
                                                <option name="offset" value="22" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="125" />
                                            <option name="offset" value="22" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement the method" />
                                            <option name="possibleAnswer" value="fun &lt;T&gt; isAPet( subject: T ):Boolean {&#10;    return when(subject){&#10;        is Cat -&gt; true&#10;        is Dog -&gt; true&#10;        else -&gt; false&#10;    }&#10;}" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="&#10;class Cat&#10;class Dog&#10;&#10;//implement the method&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertFalse&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class TestGenericFunctions {&#10;&#10;    @Test&#10;    fun testPartitionWordsAndLines() {&#10;        assertTrue(&quot;Expected true for Dog&quot;, isAPet(Dog()))&#10;        assertTrue(&quot;Expected true for Cat&quot;, isAPet(Cat()))&#10;        assertFalse(&quot;Expected false for 5&quot;, isAPet(5))&#10;        assertFalse(&quot;&quot;&quot;Expected false for &quot;xyz&quot;&quot;&quot;, isAPet(&quot;xyz&quot;))&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755866000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192983" />
                      <option name="index" value="4" />
                      <option name="name" value="Collections" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1543755869000" />
                      <option name="unitId" value="167438" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&#10;&lt;h1&gt;List&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    A list is not created using a constructor, but through the method &lt;code&gt;listOf()&lt;/code&gt;. E.g.&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;    val myList = listOf(1,3,4)&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    However, the standard List in Kotlin is immutable. Which means methods to add and remove elements&#10;    do not exist. Once the List is created, its objects cannot be added or removed.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    To create a mutable list, you use the method &lt;code&gt;mutableListOf()&lt;/code&gt;. The result is a List that&#10;    &lt;b&gt;does&lt;/b&gt; have the methods to add and remove elements&#10;&lt;/p&gt;&#10;&#10;&#10;&lt;p&gt;&#10;    Standard operations on a List are as following (note: list indices, start at 0)&#10;&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;    val myList = mutableListOf(&quot;A&quot; , &quot;B&quot; , &quot;C&quot; )&#10;    var item = myList[1]  // get the 2nd item == &quot;B&quot;&#10;    myList.size //returns the number of elements&#10;&#10;&#10;    //only when mutable&#10;    myList[1] = &quot;X&quot;  //replace the 2nd item, only when mutable&#10;    item = myList[1] // == &quot;X&quot;&#10;    myList.remove(&quot;X&quot;) // remove &quot;X&quot; from List&#10;    myList.removeAt(0) // remove whatever is at index 0&#10;    myList.clear() //remove all elements&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&lt;p&gt;&#10;    There are two methods one receiving a mutable List, the other an immutable List.&#10;&#10;    Both methods should return an immutable list that has the following changes:&#10;&lt;ul&gt;&#10;&#10;    &lt;li&gt;&#10;        change the third item to &quot;d&quot;&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        remove the second item&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;But only perform these actions if the indices are present.&#10;&#10;But, you say, I can't change an immutable list! You can however create an immutable list from&#10;a mutable list, using the &lt;code&gt;toMutableList()&lt;/code&gt; method.&#10;&#10;Bonus questions:&#10;&lt;ul&gt;&lt;li&gt;When creating a mutable list using &lt;code&gt;toMutableList&lt;/code&gt;, do operations on the&#10;new list, influence the old?&lt;/li&gt;&#10;&lt;li&gt;If the mutable list is assigned to a &lt;code&gt;val&lt;/code&gt;, can you still add/remove items?&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;/p&gt;&#10;&#10;&lt;br&gt;&#10;For a complete list of all List methods: &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/index.html&quot;&gt;Kotlin doc&lt;/a&gt;&#10;And a Kotlin intro on Collections: &lt;a href=&quot;https://kotlinlang.org/docs/reference/collections.html&quot;&gt;Kotlin reference&lt;/a&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548552" />
                            <option name="index" value="1" />
                            <option name="name" value="Lists" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="15" />
                                                <option name="offset" value="68" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="50" />
                                            <option name="offset" value="68" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="// implement me" />
                                            <option name="possibleAnswer" value="return handleMutableList(messages.toMutableList())" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="15" />
                                                <option name="offset" value="156" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="125" />
                                            <option name="offset" value="192" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="// implement me" />
                                            <option name="possibleAnswer" value="&#10;    if (messages.size &lt; 2) {&#10;        return messages&#10;    }&#10;&#10;    if (messages.size &gt; 2) {&#10;        messages[2] = &quot;d&quot;&#10;    }&#10;&#10;    messages.removeAt(1)&#10;&#10;    return messages" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun handleImmutableList(messages: List&lt;String&gt;): List&lt;String&gt; {&#10;    // implement me&#10;}&#10;&#10;fun handleMutableList(messages: MutableList&lt;String&gt;): List&lt;String&gt; {&#10;// implement me&#10;&#10;}&#10;&#10;/**&#10; * A main function to play with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(handleImmutableList(listOf(&quot;x&quot;)))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling immutableList, with input :  &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;,&quot;d&quot;,&quot;d&quot;),&#10;                handleImmutableList(listOf( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;))&#10;        )&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling immutableList, with input :  &quot;a&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;),&#10;                handleImmutableList(listOf( &quot;a&quot;))&#10;        )&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling immutableList, with input :  &quot;a&quot;, &quot;b&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;),&#10;                handleImmutableList(listOf( &quot;a&quot;, &quot;b&quot;))&#10;        )&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling immutableList, with input :  &quot;a&quot;, &quot;b&quot;,&quot;c&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;, &quot;d&quot;),&#10;                handleImmutableList(listOf( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;))&#10;        )&#10;&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableList, with input :  &quot;a&quot;, &quot;b&quot;,&quot;c&quot;,&quot;d&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;,&quot;d&quot;,&quot;d&quot;),&#10;                handleMutableList(mutableListOf( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;))&#10;        )&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableList, with input :  &quot;a&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;),&#10;                handleMutableList(mutableListOf( &quot;a&quot;))&#10;        )&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableList, with input :  &quot;a&quot;, &quot;b&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;),&#10;                handleMutableList(mutableListOf( &quot;a&quot;, &quot;b&quot;))&#10;        )&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableList, with input :  &quot;a&quot;, &quot;b&quot;,&quot;c&quot;&quot;&quot;&quot;,&#10;                listOf(&quot;a&quot;, &quot;d&quot;),&#10;                handleMutableList(mutableListOf( &quot;a&quot;, &quot;b&quot;, &quot;c&quot;))&#10;        )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755868000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Maps&lt;/h1&gt;&#10;&#10;&lt;p&gt;&#10;    Just as List, a Map is a type of collection that can be mutable or immutable.&#10;    This collection holds pairs of objects (&lt;b&gt;keys&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;).&#10;    Instantiation is done through the methods &lt;code&gt;mapOf()&lt;/code&gt; and &lt;code&gt;mutableMapOf()&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;    //pretty idiom for creating a map&#10;    val myMap = mutableMapOf(&quot;a&quot; to &quot;apple&quot;, &quot;b&quot; to &quot;bee&quot;)&#10;&#10;    //less pretty, more efficient&#10;    val myOtherMap = mutableMapOf(&#10;            Pair(&quot;a&quot;, &quot;apple&quot;),&#10;            Pair(&quot;b&quot;, &quot;bee&quot;)&#10;    )&#10;&#10;    println(myMap[&quot;a&quot;])&#10;&#10;    myMap[&quot;a&quot;] = &quot;Adam&quot;&#10;    myMap[&quot;z&quot;] = &quot;zoolander&quot;&#10;    myMap.remove(&quot;b&quot;)&#10;&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    We will more or less do the something that we did for List, but now for Map:&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    There are two methods one receiving a mutable Map, the other an immutable Map.&#10;&#10;    Both methods should return an immutable Map that has the following changes:&#10;&lt;ul&gt;&#10;&#10;    &lt;li&gt;&#10;        change the value for item with key &quot;x&quot; to 345&#10;    &lt;/li&gt;&#10;    &lt;li&gt;&#10;        remove the item with key &quot;z&quot;&#10;    &lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;br/&gt;&#10;For a complete list of all Map methods: &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-map/index.html&quot;&gt;Kotlin doc&lt;/a&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548553" />
                            <option name="index" value="2" />
                            <option name="name" value="Map" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="14" />
                                                <option name="offset" value="73" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="48" />
                                            <option name="offset" value="75" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement me" />
                                            <option name="possibleAnswer" value="return handleMutableMap(messages.toMutableMap())" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="14" />
                                                <option name="offset" value="167" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="54" />
                                            <option name="offset" value="205" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement me" />
                                            <option name="possibleAnswer" value="  if(messages.containsKey(&quot;x&quot; ) ){&#10;        messages[&quot;x&quot;] = 345&#10;    }&#10;&#10;    messages.remove(&quot;z&quot;)&#10;&#10;    return messages" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="fun handleImmutableMap(messages: Map&lt;String,Int&gt;): Map&lt;String,Int&gt; {&#10;    //implement me&#10;}&#10;&#10;fun handleMutableMap(messages: MutableMap&lt;String,Int&gt;): Map&lt;String,Int&gt; {&#10;  //implement me&#10;&#10;}&#10;&#10;/**&#10; * A main function to play with&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;    println(handleImmutableMap(mapOf(&quot;m&quot; to 123)))&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableMap, with input :  &quot;a&quot; to 1, &quot;z&quot; to 0, &quot;x&quot; to 123&quot;&quot;&quot;,&#10;                mapOf(&quot;a&quot; to 1,&quot;x&quot; to 345),&#10;                handleMutableMap(mutableMapOf( &quot;a&quot; to 1, &quot;z&quot; to 0, &quot;x&quot; to 123))&#10;        )&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableMap, with input :  &quot;a&quot; to 1&quot;&quot;&quot;,&#10;                mapOf(&quot;a&quot; to 1),&#10;                handleMutableMap(mutableMapOf( &quot;a&quot; to 1))&#10;        )&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableMap, with input :  &quot;a&quot; to 1, &quot;z&quot; to 0 &quot;&quot;&quot;,&#10;                mapOf(&quot;a&quot; to 1),&#10;                handleMutableMap(mutableMapOf( &quot;a&quot; to 1, &quot;z&quot; to 0))&#10;        )&#10;&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableMap, with input :  &quot;a&quot; to 1, &quot;z&quot; to 0, &quot;x&quot; to 123&quot;&quot;&quot;,&#10;                mapOf(&quot;a&quot; to 1,&quot;x&quot; to 345),&#10;                handleImmutableMap(mapOf( &quot;a&quot; to 1, &quot;z&quot; to 0, &quot;x&quot; to 123))&#10;        )&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableMap, with input :  &quot;a&quot; to 1&quot;&quot;&quot;,&#10;                mapOf(&quot;a&quot; to 1),&#10;                handleImmutableMap(mapOf( &quot;a&quot; to 1))&#10;        )&#10;&#10;&#10;        assertEquals(&#10;                &quot;&quot;&quot;Mistake in handling mutableMap, with input :  &quot;a&quot; to 1, &quot;z&quot; to 0 &quot;&quot;&quot;,&#10;                mapOf(&quot;a&quot; to 1),&#10;                handleImmutableMap(mapOf( &quot;a&quot; to 1, &quot;z&quot; to 0))&#10;        )&#10;&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755869000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192984" />
                      <option name="index" value="5" />
                      <option name="name" value="Extensions" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1543755872000" />
                      <option name="unitId" value="167439" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;Extension Functions&#10;To declare an extension function, we need to prefix its name with a receiver type,&#10;    i.e. the type being extended.&#10;    The following adds a prefix function to &lt;b&gt;String&lt;/b&gt;:&#10;&lt;/p&gt;&#10;&#10;    &lt;code&gt;&#10;    fun String.prefix() = &quot;prefix&gt; $this&quot;&#10;    &lt;/code&gt;&#10;&#10;    &lt;p&gt;&#10;        The this keyword inside an extension function corresponds to the receiver object (the one that is passed before the dot). Now, we can call such a function on any String:&#10;    &lt;/p&gt;&#10;&#10;&#10;&lt;code&gt;&#10;    &quot;my great string&quot;.prefix()&#10;&lt;/code&gt;&#10;&lt;p&gt;&#10;and this will return&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;prefix&gt; my great string&#10;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;Create a &lt;b&gt;hello()&lt;/b&gt; extension function for String that will return &quot;hello xyz&quot;, where &quot;xyz&quot; was the original string.&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548554" />
                            <option name="index" value="1" />
                            <option name="name" value="Extension Function introduction" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="30" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="34" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Implement extension function" />
                                            <option name="possibleAnswer" value="fun String.hello() = &quot;hello $this&quot;&#10;" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="//Implement extension function&#10;&#10;/**&#10; * Usage example&#10; */&#10;fun main(args: Array&lt;String&gt;) {&#10;    println( &quot;Wall-E&quot;.hello() )&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        Assert.assertEquals(&quot;hello method is not returning what is expected&quot;, &quot;hello john&quot;, &quot;john&quot;.hello() )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755871000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;p&gt;&#10;Extend the Array&amp;lt;Int&amp;gt; class with the method &lt;b&gt;oneMinus()&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    This element should calculate&#10;&lt;/p&gt;&#10;    &lt;code&gt;1-value&lt;/code&gt;&#10;    &lt;p&gt;&#10;    for each value in the Array, and return a new array with these values.&#10;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548555" />
                            <option name="index" value="2" />
                            <option name="name" value="Extension Function" />
                            <option name="record" value="-1" />
                            <option name="status" value="Solved" />
                            <option name="stepikChangeStatus" value="Info and Content changed" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="51" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="159" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Implement the oneMinus() extension for Array&lt;Int&gt;" />
                                            <option name="possibleAnswer" value="&#10;fun Array&lt;Int&gt;.oneMinus():Array&lt;Int&gt; {&#10;    val result = this.clone()&#10;    for( i in this.indices) {&#10;        result[i] = 1 - this[i]&#10;    }&#10;    return result&#10;}" />
                                            <option name="selected" value="true" />
                                            <option name="status" value="Solved" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="true" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="//Implement the oneMinus() extension for Array&lt;Int&gt;&#10;&#10;/**&#10; * Usage example&#10; */&#10;fun main(args:Array&lt;String&gt;){&#10;    val myArray = arrayOf(3,4,5)&#10;    val minusArray:Array&lt;Int&gt; = myArray.oneMinus()&#10;&#10;    minusArray.forEach { println(&quot;* $it&quot;) }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertEquals&#10;import org.junit.Before&#10;import org.junit.Test&#10;&#10;class Test {&#10;&#10;    @Before&#10;    fun setUp() {&#10;        main(arrayOf())&#10;    }&#10;&#10;    @Test fun testSolution() {&#10;&#10;        assertArray( arrayOf(0,-1,-2), arrayOf( 1, 2, 3 ).oneMinus() )&#10;&#10;&#10;    }&#10;&#10;&#10;&#10;    private fun &lt;T&gt;assertArray(expected:Array&lt;T&gt;, actual:Array&lt;T&gt;){&#10;        expected.forEachIndexed{ i,v -&gt;&#10;            assertEquals(&quot;Arrays not equal at index $i&quot;, v, actual[i])&#10;        }&#10;    }&#10;&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755872000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192985" />
                      <option name="index" value="6" />
                      <option name="name" value="Objects" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1543755877000" />
                      <option name="unitId" value="167440" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Object Declarations&lt;/h1&gt;&#10;&lt;br&gt;&#10;&lt;p&gt;When we need to implement an interface without explicitly declaring a new implementation class&#10;    or we want to declare a singleton object, in Kotlin we can do this by simply declaring an &lt;b&gt;&lt;code&gt;object&lt;/code&gt;&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;An &lt;b&gt;&lt;code&gt;object&lt;/code&gt; declaration looks like this :&lt;/b&gt;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;        object Utility{&#10;            fun formatter(){&#10;                ...&#10;            }&#10;        }&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;Or with a supertype : &lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;        object Utility : BaseUtilities{&#10;            fun formatter(){&#10;                ...&#10;            }&#10;        }&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;Couple of things to note :&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;it always has a name following the &lt;code&gt;object&lt;/code&gt; keyword&lt;/li&gt;&#10;    &lt;li&gt;an object declaration cannot be local (i.e. be nested directly inside a function).&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;p&gt;&#10;    You can read more about object declarations in the &lt;a href=&quot;https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations&quot;&gt;Kotlin reference&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&lt;p&gt;&#10;&lt;p&gt;Declare the following in Task.kt:&lt;/p&gt;&#10;&lt;ul&gt;&#10;    &lt;li&gt;&#10;        a singleton object named &lt;code&gt;Counter&lt;/code&gt;.&#10;        You can declare an object by using Intellij's auto completion. While typing 'singleton' press the return key&#10;    &lt;/li&gt;&#10;    &lt;li&gt; a private &lt;code&gt;Int&lt;/code&gt; variable &lt;code&gt;count&lt;/code&gt; with initial value &lt;b&gt;0&lt;/b&gt;.&lt;/li&gt;&#10;    &lt;li&gt; a function &lt;code&gt;countUp&lt;/code&gt; that increments &lt;code&gt;count&lt;/code&gt; and returns the incremented value.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548556" />
                            <option name="index" value="1" />
                            <option name="name" value="Declarations" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="26" />
                                                <option name="offset" value="0" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="26" />
                                            <option name="offset" value="0" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Declare here the counter" />
                                            <option name="possibleAnswer" value="object Counter{&#10;    private var count = 0&#10;&#10;    fun countUp()=&#10;        ++count&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="//Declare here the counter&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;//    println(Counter.countUp())&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.hamcrest.core.Is&#10;import org.junit.Assert&#10;import org.junit.Test&#10;import java.lang.reflect.Method&#10;import kotlin.reflect.KClass&#10;&#10;class Test {&#10;    @Test&#10;    fun testClass() {&#10;        assertCounterObject()&#10;    }&#10;&#10;    @Test&#10;    fun testSolution() {&#10;        val clazz = getObject(&quot;Counter&quot;)&#10;        clazz?.objectInstance?.run {&#10;            val counter = this&#10;            counter.javaClass.getMethodIfExists(&quot;countUp&quot;, Int::class.java)?.run {&#10;                invoke(counter)&#10;                invoke(counter)&#10;                invoke(counter)&#10;                Assert.assertThat(&#10;                        &quot;Not the expected count&quot;,&#10;                        invoke(counter) as Int,&#10;                        Is.`is`(4)&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun assertCounterObject() {&#10;        val className = &quot;Counter&quot;&#10;        val clazz = getObject(className)&#10;&#10;&#10;        if (clazz == null) {&#10;            Assert.fail(&quot;Please create an object with the name: $className&quot;)&#10;            return&#10;        }&#10;&#10;&#10;        if (clazz.objectInstance == null) {&#10;            Assert.fail(&quot;$className is not an object&quot;)&#10;            return&#10;        }&#10;&#10;        clazz.java.assertHasFunction(&quot;countUp&quot;, Int::class.java)&#10;&#10;    }&#10;}&#10;&#10;fun getObject(className: String): KClass&lt;*&gt;? {&#10;    return try {&#10;        Class.forName(className, false, Test::class.java.classLoader)!!.kotlin&#10;    } catch (e: ClassNotFoundException) {&#10;        null&#10;    }&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasFunction(functionName: String, retType: Class&lt;*&gt;, vararg paramTypes: Class&lt;out Any&gt;) {&#10;&#10;    try {&#10;        val method = this.getMethod(functionName, *paramTypes)&#10;        if (method?.returnType != retType) {&#10;            throw java.lang.RuntimeException()&#10;        }&#10;    } catch (ex: java.lang.Exception) {&#10;        Assert.fail(&quot;&quot;&quot;Mistake in class ${this.simpleName}: Cannot find a function with the name &quot;$functionName&quot;. If you are sure you have a function with this name, please check its signature.&quot;&quot;&quot;)&#10;    }&#10;}&#10;&#10;fun Class&lt;*&gt;.getMethodIfExists(name: String, retType: Class&lt;*&gt;): Method? {&#10;    try {&#10;        val method = this.getMethod(name)!!&#10;        if (retType.isAssignableFrom(method.returnType)) {&#10;            return method&#10;        }&#10;    } catch (e: Exception) {&#10;    }&#10;    return null&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755875000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Object expressions&lt;/h1&gt;&#10;&lt;br&gt;&#10;&lt;p&gt;Object expressions can come in handy when we want to create an object of a slight modification of some class, without&#10;    explicitly declaring a new subclass for it. This we call creating an object of anonymous class.&lt;/p&gt;&#10;&#10;&lt;p&gt;Here we have an example of an object expression:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt;&#10;open class A{&#10;    open fun someFun(){&#10;        println(&quot;hello&quot;)&#10;    }&#10;&#10;}&#10;&#10;fun foo() {&#10;    val adHoc = object : A(){&#10;        override fun someFun(){&#10;            println(&quot;is it me you're looking for?&quot;)&#10;        }&#10;    }&#10; }&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&lt;p&gt;Code in object expressions can access properties from the enclosing scope:&lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;&#10;&#10;&#10;interface B{&#10;    fun counter()&#10;}&#10;&#10;class FooBar() {&#10;&#10;    var count = 0&#10;&#10;    val adHoc = object : B{&#10;        override fun counter(){&#10;            count++&#10;        }&#10;    }&#10; }&lt;/code&gt;&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    You can read more about Object Expressions at: &lt;a href=&quot;https://kotlinlang.org/docs/reference/object-declarations.html#object-expressions&quot;&gt;Kotlin reference&lt;/a&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&lt;p&gt;&#10;&#10;    &lt;code&gt;PrintShop&lt;/code&gt; has a method &lt;code&gt;printDocument&lt;/code&gt; that accepts a document and a &lt;code&gt;Printer&lt;/code&gt;.&#10;    Printer is an interface.&lt;br/&gt; A &lt;code&gt;PrintShopOwner&lt;/code&gt; has a &lt;code&gt;printedDocument&lt;/code&gt; property and a &lt;code&gt;printIt&lt;/code&gt;&#10;    function.&lt;br/&gt;&#10;    In order to print something, a &lt;code&gt;PrintShopOwner&lt;/code&gt; will have to call the printDocument function from the&#10;    &lt;code&gt;PrintShop&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    Objective:&#10;&lt;ul&gt;&#10;    &lt;li&gt;create an object from the &lt;code&gt;Printer&lt;/code&gt; interface and pass it into the printDocument method.&lt;/li&gt;&#10;    &lt;li&gt;override the print method&lt;/li&gt;&#10;    &lt;li&gt;assign document to &lt;code&gt;printedDocument&lt;/code&gt; variable.&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&lt;/p&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548557" />
                            <option name="index" value="2" />
                            <option name="name" value="Expressions" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="34" />
                                                <option name="offset" value="309" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="34" />
                                            <option name="offset" value="309" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//implement object expression here" />
                                            <option name="possibleAnswer" value="object : Printer {&#10;            override fun print(document: String) {&#10;                printedDocument = document&#10;            }&#10;&#10;        }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="interface Printer {&#10;    fun print(document: String)&#10;}&#10;&#10;object PrintShop {&#10;&#10;    fun printDocument(document: String, printer: Printer) {&#10;        printer.print(document)&#10;    }&#10;}&#10;&#10;class PrintShopOwner {&#10;&#10;    var printedDocument = &quot;&quot;&#10;&#10;    fun printIt(document: String) {&#10;&#10;        PrintShop.printDocument(document, //implement object expression here)&#10;    }&#10;}&#10;&#10;fun main(args: Array&lt;String&gt;) {&#10;&#10;    val owner = PrintShopOwner()&#10;    val document = &quot;Photo book&quot;&#10;&#10;    owner.printIt(document)&#10;&#10;    val printedDocument = owner.printedDocument&#10;    println(printedDocument)&#10;&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test fun testSolution() {&#10;        val owner = PrintShopOwner()&#10;        owner.printIt(&quot;Photo book&quot;)&#10;        Assert.assertEquals(&quot;Photo book&quot;, owner.printedDocument)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755876000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Companion Object&lt;/h1&gt;&#10;&lt;p&gt;Object declaration inside a class can be marked with the &lt;b&gt;companion&lt;/b&gt; keyword.&lt;/p&gt;&#10;&lt;p&gt;The nice thing about a &lt;code&gt;Companion&lt;/code&gt; object is that the functions or values declared inside it will look like they are part of the class it accompanies.&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;      class SomeClass {&#10;&#10;        companion object CompanionObject {&#10;            fun doSomething(){&#10;                println(&quot;something&quot;)&#10;            }&#10;        }&#10;      }&#10;      val x = SomeClass.doSomething()&#10;      val actualCompanionObject = SomeClass.CompanionObject&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;We don't even have to name the companion object:&lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;      class SomeClass {&#10;        companion object {&#10;            fun doSomething(){&#10;                println(&quot;something&quot;)&#10;            }&#10;        }&#10;      }&#10;      val x = SomeClass.doSomething()&#10;      val actualCompanionObject = SomeClass.Companion&#10;    &lt;/code&gt;&lt;/pre&gt;&#10;&lt;p&gt;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&lt;p&gt;&#10;    One use case of a &lt;b&gt;&lt;code&gt;companion&lt;/code&gt;&lt;/b&gt; object could be an implementation of the factory pattern.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    The factory’s goal is to deliver a ready-to-use object to its client. The factory hides the complexity of creating&#10;    and selecting the right object for the job.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;Now it's time for you to create a companion object. &lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    You know exactly what a &lt;a href=&quot;https://quidd.co/blog/making-rick-and-morty-plumbus-quidd/&quot;&gt;plumbus&lt;/a&gt; is and how it’s used. Now we&#10;     will create a &lt;b&gt;&lt;code&gt;PlumbusFactory&lt;/code&gt;&lt;/b&gt;! The factory will create simple Plumbuses, assign each one an id,&#10;    and count how many have been made.&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    There currently is a Plumbus class with a private constructor (so no one create his own home-grown Plumbus). It&#10;    is your job to add a companion object by the name &lt;b&gt;&lt;code&gt;PlumbusFactory&lt;/code&gt;&lt;/b&gt;. This factory has two things:&#10;    &lt;ol&gt;&#10;      &lt;li&gt;A &lt;b&gt;&lt;code&gt;count&lt;/code&gt;&lt;/b&gt; property indicating how many Plumbuses have been created.&lt;/li&gt;&#10;      &lt;li&gt;A &lt;b&gt;&lt;code&gt;create()&lt;/code&gt;&lt;/b&gt; function, which increments the &lt;code&gt;count&lt;/code&gt; and returns a fresh Plumbus with an id that is equivalent&#10;      to the new count/&lt;/li&gt;&#10;    &lt;/ol&gt;&#10;&lt;/p&gt;&#10;&#10;&lt;p&gt;&#10;    To get an idea what it will look like when used: see the commented out code in the main method.&#10;&lt;/p&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548558" />
                            <option name="index" value="3" />
                            <option name="name" value="Companion objects" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="31" />
                                                <option name="offset" value="55" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="31" />
                                            <option name="offset" value="55" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//add the companion object here" />
                                            <option name="possibleAnswer" value="companion object PlumbusFactory {&#10;        var count = 0&#10;            private set&#10;&#10;        fun create(): Plumbus {&#10;            count++&#10;            return Plumbus(count)&#10;        }&#10;    }" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="class Plumbus private constructor(val id: Int) {&#10;&#10;&#10;    //add the companion object here&#10;}&#10;&#10;&#10;fun main() {&#10;//    Plumbus.create()&#10;//    Plumbus.create()&#10;//    Plumbus.create()&#10;//    Plumbus.create()&#10;//    val myFirstPlumbus = Plumbus.create()&#10;//    println(&quot;My first plumbus id: ${myFirstPlumbus.id}&quot;)&#10;//    println(&quot;Total production cound: ${Plumbus.count}&quot;)&#10;&#10;//    myFirstPlumbus.create() //not possible&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.hamcrest.core.Is.`is`&#10;import org.junit.Assert.assertThat&#10;import org.junit.Assert.fail&#10;import org.junit.Test&#10;import kotlin.reflect.full.companionObjectInstance&#10;import kotlin.reflect.full.functions&#10;import kotlin.reflect.full.memberProperties&#10;&#10;private val FIELD_COUNT = &quot;count&quot;&#10;private val FUN_CREATE = &quot;create&quot;&#10;private val CO_PLUMBUS_FACTORY = &quot;PlumbusFactory&quot;&#10;&#10;class Test {&#10;    @Test&#10;    fun `structure is as expected`(){&#10;        val factory = Plumbus::class.companionObjectInstance&#10;&#10;        factory?.run{&#10;            assertThat(&quot;Companion object has an unexpected name&quot;,&#10;                    javaClass.simpleName,&#10;                    `is`(CO_PLUMBUS_FACTORY))&#10;            javaClass.assertHasFunction(FUN_CREATE,Plumbus::class.java)&#10;            javaClass.assertHasProperty(FIELD_COUNT,Int::class.java)&#10;        } ?:&#10;                fail(&quot;The plumbus needs a companion object&quot;)&#10;    }&#10;&#10;&#10;    @Test&#10;    fun `plumbuses are created properly`(){&#10;        `structure is as expected`()&#10;&#10;        val factory = Plumbus::class.companionObjectInstance&#10;&#10;        factory?.run{&#10;            val create =javaClass.kotlin.functions.first { it.name == FUN_CREATE }&#10;            val count = javaClass.kotlin.memberProperties.first{ it.name == FIELD_COUNT }&#10;&#10;            create.call(this)&#10;            create.call(this)&#10;            create.call(this)&#10;            create.call(this)&#10;&#10;            val plumbus = create.call(this) as Plumbus&#10;&#10;            assertThat(&quot;Id of plumbus is incorrect&quot;, plumbus.id, `is`(5))&#10;            assertThat(&quot;Count of the plumbus factory is incorrect&quot;, count.get(this) as Int, `is`(5))&#10;        }&#10;&#10;    }&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasFunction(functionName: String, retType: Class&lt;*&gt;, vararg paramTypes: Class&lt;out Any&gt;) {&#10;&#10;    try {&#10;        val method = this.getMethod(functionName, *paramTypes)&#10;        if (method?.returnType != retType) {&#10;            throw java.lang.RuntimeException()&#10;        }&#10;    } catch (ex: java.lang.Exception) {&#10;        fail(&quot;&quot;&quot;Mistake in class ${this.simpleName}: Cannot find a function with the name &quot;$functionName&quot;. If you are sure you have a function with this name, please check its signature.&quot;&quot;&quot;)&#10;    }&#10;}&#10;&#10;fun Class&lt;*&gt;.assertHasProperty(valName: String, retType: Class&lt;*&gt;) {&#10;    val firstChar = valName[0].toUpperCase()&#10;    val restOfVal = valName.substring(1)&#10;&#10;    val getMethod = &quot;get${firstChar}${restOfVal}&quot;&#10;    try {&#10;        val method = this.getMethod(getMethod)!!&#10;        if (!retType.isAssignableFrom(method.returnType)) {&#10;            fail(&quot;Mistake in class ${this.simpleName}: Property \&quot;${valName}\&quot; is of type ${method.returnType}. Should be ${retType}&quot;)&#10;        }&#10;    } catch (e: Exception) {&#10;        fail(&quot;Mistake in class ${this.simpleName}: Can't see any \&quot;${valName}\&quot; property. Did you forget to add 'var' or 'val'?&quot;)&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755877000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192986" />
                      <option name="index" value="7" />
                      <option name="name" value="Testing" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1543755878000" />
                      <option name="unitId" value="167441" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Unit testing&lt;/h1&gt;&#10;&lt;p&gt;Let's turn things around! We have some code we need to cover with our tests. &lt;/p&gt;&#10;&lt;p&gt;The common structure of a test file looks like this: &lt;/p&gt;&#10;&lt;pre&gt;&#10;    &lt;code data-lang=&quot;text/x-kotlin&quot;&gt;&#10;class Test {&#10;&#10;    @Before&#10;    fun setup() {&#10;        // Everything you like to do before each test has run&#10;    }&#10;&#10;    @After&#10;    fun teardown() {&#10;          // Everything you like to do after each test has run&#10;    }&#10;&#10;    @Test&#10;    fun a_should_be_equal_to_a() {&#10;        val expected = &quot;a&quot;&#10;        val actual = &quot;a&quot;&#10;&#10;        assertEquals(expected, actual, &quot;Should return equal&quot;)&#10;    }&#10;&#10;}&#10;    &lt;/code&gt;&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Each line of code we call from an annotated with &lt;code&gt;@Test&lt;/code&gt; method will effect the code coverage.&#10;    The higher your code coverage is the smaller the chance that you will find unexpected behaviour in your application.&#10;    Highly tested code base makes easier to maintain or to refactor the code base.&#10;&lt;/p&gt;&#10;&lt;p&gt;Complete the unit tests and view the code coverage. Aim at 100 percent code coverage.&lt;/p&gt;&#10;&lt;p&gt;See this &lt;a href=&quot;https://www.jetbrains.com/help/idea/viewing-code-coverage-results.html&quot;&gt;page&lt;/a&gt; on viewing code coverage report in Intellij.&lt;/p&gt;&#10;&#10;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548559" />
                            <option name="index" value="1" />
                            <option name="name" value="Unit testing" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="39" />
                                                <option name="offset" value="1027" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="39" />
                                            <option name="offset" value="1027" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//add here the expected test data value" />
                                            <option name="possibleAnswer" value="testUsers" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="20" />
                                                <option name="offset" value="1088" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="20" />
                                            <option name="offset" value="1088" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//call getAllUsers()" />
                                            <option name="possibleAnswer" value="getAllUsers()" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="2" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="39" />
                                                <option name="offset" value="1265" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="39" />
                                            <option name="offset" value="1265" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//add here the expected test data value" />
                                            <option name="possibleAnswer" value="user3" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="3" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="20" />
                                                <option name="offset" value="1326" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="20" />
                                            <option name="offset" value="1326" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//call getUserById()" />
                                            <option name="possibleAnswer" value="getUserById(user3.id)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="4" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="18" />
                                                <option name="offset" value="1526" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="18" />
                                            <option name="offset" value="1526" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//call getUserById" />
                                            <option name="possibleAnswer" value="getUserById(unknown.id)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="5" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="39" />
                                                <option name="offset" value="1708" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="39" />
                                            <option name="offset" value="1708" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//add here the expected test data value" />
                                            <option name="possibleAnswer" value="testUsersWithRoleRead" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="6" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="32" />
                                                <option name="offset" value="1769" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="32" />
                                            <option name="offset" value="1769" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//call filterUsersOnPermission()" />
                                            <option name="possibleAnswer" value="filterUsersOnPermission(READ)" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="7" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="27" />
                                                <option name="offset" value="2063" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="27" />
                                            <option name="offset" value="2063" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="// implement here your test" />
                                            <option name="possibleAnswer" value="        removeUser(user1)&#10;        assertFalse(&quot;Should not contain $user1&quot;, getAllUsers().contains(user1))&#10;" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="import Permissions.READ&#10;import org.junit.After&#10;import org.junit.Assert.*&#10;import org.junit.Before&#10;import org.junit.Test&#10;&#10;class UserTest {&#10;&#10;    companion object TestData {&#10;        private val user1 = UserDTO(&quot;1109331&quot;, READ)&#10;        private val user2 = UserDTO(&quot;1109333&quot;, Permissions.WRITE)&#10;        private val user3 = UserDTO(&quot;1109334&quot;, Permissions.OWNER)&#10;        private val user4 = UserDTO(&quot;1109335&quot;, Permissions.ADMIN)&#10;        private val user5 = UserDTO(&quot;1109336&quot;, Permissions.ADMIN)&#10;        private val user6 = UserDTO(&quot;1109337&quot;, READ)&#10;        private val unknown = UserDTO(&quot;1109338&quot;, READ)&#10;&#10;        private val testUsers = arrayListOf(user1, user2, user3, user4, user5, user6)&#10;        private val testUsersWithRoleRead = arrayListOf(user1, user6)&#10;    }&#10;&#10;    @Before&#10;    fun setup() {&#10;        // add all users&#10;        addAllUser(testUsers)&#10;    }&#10;&#10;    @After&#10;    fun teardown() {&#10;        // clear all users&#10;        clearAllUser()&#10;    }&#10;&#10;&#10;    @Test&#10;    fun `when getAllUsers then return all users`() {&#10;        val expected = //add here the expected test data value&#10;        val actual = //call getAllUsers()&#10;&#10;        assertEquals(&quot;Should return $testUsers&quot;, expected, actual)&#10;    }&#10;&#10;    @Test&#10;    fun `when GetUserById then return user`() {&#10;        val expected = //add here the expected test data value&#10;        val actual = //call getUserById()&#10;&#10;        assertEquals(&quot;Should return $user3&quot;, expected, actual)&#10;    }&#10;&#10;    @Test&#10;    fun `when GetUserById with unknown id then should return null value`() {&#10;        val actual = //call getUserById&#10;&#10;        assertNull(&quot;Should be null&quot;, actual)&#10;    }&#10;&#10;    @Test&#10;    fun `when filter on permission is set to read then return two users`() {&#10;        val expected = //add here the expected test data value&#10;        val actual = //call filterUsersOnPermission()&#10;&#10;        assertEquals(&quot;Should return $testUsersWithRoleRead&quot;, expected, actual)&#10;    }&#10;&#10;    @Test&#10;    fun `when removing 'user1' then the repository should not contain that user anymore`() {&#10;        //remove user&#10;        //check that user is not a part anymore&#10;&#10;// implement here your test&#10;    }&#10;&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="src/UserRepository.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/UserRepository.kt" />
                                      <option name="text" value="import java.util.stream.Collectors&#10;&#10;private val userRepo = ArrayList&lt;UserDTO&gt;()&#10;&#10;fun addAllUser(user: ArrayList&lt;UserDTO&gt;): Boolean {&#10;    return userRepo.addAll(user)&#10;}&#10;&#10;fun getAllUsers(): List&lt;UserDTO&gt; {&#10;    return userRepo&#10;}&#10;&#10;fun getUserById(id: String): UserDTO? {&#10;    return userRepo.find { it.id == id }&#10;}&#10;&#10;fun containUser(user: UserDTO): Boolean {&#10;    return userRepo.contains(user)&#10;}&#10;&#10;fun filterUsersOnPermission(permissions: Permissions): List&lt;UserDTO&gt; {&#10;    return userRepo.stream().filter { it -&gt; it.permissions == permissions }.collect(Collectors.toList())&#10;}&#10;&#10;fun removeUser(user: UserDTO): Boolean {&#10;    return userRepo.remove(user)&#10;}&#10;&#10;fun clearAllUser() {&#10;    userRepo.clear()&#10;}&#10;&#10;data class UserDTO(val id: String, val permissions: Permissions)&#10;&#10;enum class Permissions {&#10;    ALL, ADMIN, OWNER, READ, WRITE&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.fail&#10;import org.junit.Test&#10;import org.junit.runner.Computer&#10;import org.junit.runner.JUnitCore&#10;&#10;&#10;class Test {&#10;    private val computer = Computer()&#10;&#10;    private val jUnitCore = JUnitCore()&#10;&#10;    @Test&#10;    fun runTest() {&#10;        val result = jUnitCore.run(computer, UserTest::class.java)&#10;&#10;        if (!result.wasSuccessful() ){&#10;            result.failures.map{failure -&gt;&#10;                when(failure.exception) {&#10;                    is NotImplementedError -&gt; fail(&quot;&quot;&quot;Stil a TODO in test &quot;${failure.exception.stackTrace.get(0).methodName}&quot;&quot;&quot;&quot;)&#10;                    else -&gt; throw failure.exception&#10;                }&#10;&#10;                throw failure.exception}&#10;        }&#10;&#10;&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1543755878000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                    <Lesson>
                      <option name="customPresentableName" />
                      <option name="id" value="192987" />
                      <option name="index" value="8" />
                      <option name="name" value="Generics In-depth" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="updateDate" value="1557009965000" />
                      <option name="unitId" value="167442" />
                      <option name="items">
                        <list>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&lt;h1&gt;Variance&lt;/h1&gt;&#10;Variance refers to how subtyping between generics relates to the actual type parameters.&#10;&#10;&lt;p&gt;&#10;    We will describe three types of variances, what they are and what use they have.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;Invariance&lt;/h2&gt;&#10;&#10;&lt;p&gt;When you create a generic class, it will by default be considered &lt;b&gt;invariant&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;What does this mean?&lt;/h2&gt;&#10;&lt;p&gt;&#10;It means that when you have the following code:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;    interface Animal&#10;&#10;    class Dog:Animal&#10;&#10;    class Carrier&amp;lt;T&amp;gt;( var thing: T)&#10;&lt;/pre&gt;&#10;&#10;&lt;p&gt;&#10;    Then, even though do Dog implements Animal, you can't do the following:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    val dogCarrier : Carrier&amp;lt;Dog&amp;gt; = Carrier(Dog())&#10;    val animalCarrier : Carrier&amp;lt;Animal&amp;gt; = dogCarrier&#10;&lt;/pre&gt;&#10;&#10;&lt;h2&gt;Why would they not allow this (by default)?&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Let's assume we &lt;b&gt;can&lt;/b&gt; assign it, then the following would be possible:&#10;&lt;/p&gt;&#10;&#10;&lt;pre&gt;&#10;    val dogCarrier : Carrier&amp;lt;Dog&amp;gt; = Carrier(Dog())&#10;    //assume this is possible for the example&#10;    val animalCarrier : Carrier&amp;lt;Animal&amp;gt; = dogCarrier&#10;&#10;    //now we can do this:&#10;    animalCarrier.thing = Horse()  //With Horse also implementing Animal&#10;&lt;/pre&gt;&#10;&#10;&#10;&lt;p&gt;So we could put a Horse in our dogCarrier ! That is definitely unwanted&lt;/p&gt;&#10;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;Fix the assignment of the DogCarrier to befit an invariant. i.e. &lt;b&gt;not&lt;/b&gt; an animalcarrier.&lt;br/&gt;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548560" />
                            <option name="index" value="1" />
                            <option name="name" value="Variance - invariant" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="195" />
                                                <option name="offset" value="157" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="195" />
                                            <option name="offset" value="157" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//FIXME: assign the dogCarrier to a new variable &quot;myCarrier&quot;. The following doesn't work:&#10;//var myCarrier: Carrier&lt;Animal&gt;= dogCarrier &#10;&#10;//Temporary placeholder:&#10;var myCarrier: Carrier&lt;*&gt;? = null" />
                                            <option name="possibleAnswer" value="var myCarrier: Carrier&lt;Dog&gt; = dogCarrier" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="interface Animal&#10;&#10;class Dog : Animal&#10;&#10;class Carrier&lt;T&gt;(val thing: T)&#10;&#10;fun carryDogs(): Carrier&lt;*&gt;? {&#10;&#10;    val dogCarrier: Carrier&lt;Dog&gt; = Carrier(Dog())&#10;&#10;    //FIXME: assign the dogCarrier to a new variable &quot;myCarrier&quot;. The following doesn't work:&#10;//var myCarrier: Carrier&lt;Animal&gt;= dogCarrier &#10;&#10;//Temporary placeholder:&#10;var myCarrier: Carrier&lt;*&gt;? = null&#10;&#10;    return myCarrier&#10;}&#10;&#10;&#10;&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;&#10;        assertTrue(&#10;                &quot;Fix the assignment of the carrier&quot;,&#10;                carryDogs() != null&#10;        )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1557009963000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&#10;&lt;h1&gt;Covariance&lt;/h1&gt;&#10;&#10;&lt;h2&gt;What does this mean&lt;/h2&gt;&#10;&#10;Covariance means that the following is possible:&#10;&#10;&lt;pre&gt;&#10;    val dogCarrier : Carrier&amp;lt;Dog&amp;gt; = Carrier(Dog())&#10;    val animalCarrier : Carrier&amp;lt;Animal&amp;gt; = dogCarrier&#10;&lt;/pre&gt;&#10;&#10;In other words: the ordering of the generic follows the ordering of the generic type.&#10;When &lt;code&gt;Dog&lt;/code&gt; extends &lt;code&gt;Animal&lt;/code&gt;, &lt;code&gt;Carrier&amp;lt;Dog&amp;gt;&lt;/code&gt; can be considered to&#10;extend &lt;code&gt;Carrier&amp;lt;Animal&amp;gt;&lt;/code&gt;.&#10;&#10;&lt;h2&gt;Why would we want this?&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Let's say you have a class &lt;code&gt;Carrier&amp;lt;T&amp;gt;&lt;/code&gt;: and it has only methods that return &lt;code&gt;T&lt;/code&gt;,&#10;    and there are no methods that have &lt;code&gt;T&lt;/code&gt; as their arguments. In this case covariance would be desired,&#10;    because there would be no possibility, as by our example, to provide an &lt;code&gt;Animal&lt;/code&gt; to&#10;    a &lt;code&gt;dogCarrier&lt;/code&gt;.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    For example:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    class Carrier&amp;lt;T&amp;gt;(private val thing: T){&#10;        fun getThing():T = thing&#10;    }&#10;&#10;&#10;    val dogCarrier : Carrier&amp;lt;Dog&amp;gt; = Carrier(Dog())&#10;    val animalCarrier: Carrier&amp;lt;Animal&amp;gt; = dogCarrier&#10;&#10;    val animal:Animal = animalCarrier.getThing()  //not a problem&#10;    // and there are no methods in Carrier with argument T&#10;&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    If you have a class as described above, with only methods returning &lt;code&gt;T&lt;/code&gt; and no&#10;    methods with &lt;code&gt;T&lt;/code&gt; as argument, we call this a &lt;b&gt;producer&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;How to make a class covariant?&lt;/h2&gt;&#10;&#10;Making a class covariant, in other words, having &lt;code&gt;Carrier&amp;lt;Dog&amp;gt;&lt;/code&gt; to be considered&#10;extending &lt;code&gt;Carrier&amp;lt;Animal&amp;gt;&lt;/code&gt;, requires you to add the keyword &lt;b&gt;out&lt;/b&gt;&#10;&#10;&lt;pre&gt;&#10;    class Carrier&amp;lt;&lt;b&gt;out&lt;/b&gt; T&amp;gt;(private val thing: T){&#10;        fun getThing():T = thing&#10;    }&#10;&lt;/pre&gt;&#10;If you don't add &lt;b&gt;out&lt;/b&gt;, kotlin will keep considering the class invariant.&#10;Be aware however that you can only add &lt;b&gt;out&lt;/b&gt; to classes that have &lt;b&gt;NO methods with T as argument !&lt;/b&gt;&#10;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;The current class is not covariant. Make it so that it can and will be covariant:&#10;&lt;ul&gt;&#10;    &lt;li&gt;Make the class a producer: remove all consumer methods&lt;/li&gt;&#10;    &lt;li&gt;Add the right keyword&lt;/li&gt;&#10;    &lt;li&gt;And eventually assign a dog carrier to an animal carrier&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548561" />
                            <option name="index" value="2" />
                            <option name="name" value="Variance - covariance" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="214" />
                                                <option name="offset" value="37" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="214" />
                                            <option name="offset" value="37" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="class Carrier&lt;T&gt;(private var thing: T){&#10;    private var name:String = &quot;unnamed&quot;&#10;    fun getThing():T = thing&#10;&#10;    fun addThing(thing:T) { this.thing = thing}&#10;    fun changeName(newName:String) { name = newName }&#10;&#10;}" />
                                            <option name="possibleAnswer" value="&#10;class Carrier&lt;out T&gt;(private var thing: T) {&#10;    private var name: String = &quot;unnamed&quot;&#10;    fun getThing(): T = thing&#10;&#10;    fun changeName(newName: String) {&#10;        name = newName&#10;    }&#10;&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="49" />
                                                <option name="offset" value="394" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="49" />
                                            <option name="offset" value="394" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Assign a dog Carrier to the animal carrier here" />
                                            <option name="possibleAnswer" value="        animalCarrier = dogCarrier" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="interface Animal&#10;&#10;class Dog : Animal&#10;class Carrier&lt;T&gt;(private var thing: T){&#10;    private var name:String = &quot;unnamed&quot;&#10;    fun getThing():T = thing&#10;&#10;    fun addThing(thing:T) { this.thing = thing}&#10;    fun changeName(newName:String) { name = newName }&#10;&#10;}&#10;&#10;&#10;class UseCase {&#10;    var animalCarrier: Carrier&lt;Animal&gt;? = null&#10;    val dogCarrier: Carrier&lt;Dog&gt; = Carrier(Dog())&#10;&#10;    fun assignCarrier() {&#10;//Assign a dog Carrier to the animal carrier here&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.hamcrest.core.Is&#10;import org.hamcrest.core.IsInstanceOf&#10;import org.hamcrest.core.IsNull&#10;import org.hamcrest.core.IsNull.notNullValue&#10;import org.junit.Assert.*&#10;import org.junit.Test&#10;&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        val dogCarrier = Carrier(Dog())&#10;        assertFalse(&quot;Class still has a consumer method&quot;,&#10;            dogCarrier.javaClass.kotlin.members.any { it.name == &quot;addThing&quot; }&#10;        )&#10;&#10;        val useCase = UseCase()&#10;&#10;        useCase.assignCarrier()&#10;&#10;        assertTrue( &quot;Assign a dogCarrier to the animalCarrier&quot;,&#10;                useCase.animalCarrier?.getThing() != null)&#10;&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1557009964000" />
                          </EduTask>
                          <EduTask>
                            <option name="customPresentableName" />
                            <option name="descriptionFormat" value="HTML" />
                            <option name="descriptionText" value="&lt;html&gt;&#10;&#10;&lt;h1&gt;Contravariance&lt;/h1&gt;&#10;&#10;&lt;h2&gt;What does this mean&lt;/h2&gt;&#10;&#10;Contravariance means that the following is possible:&#10;&#10;&lt;pre&gt;&#10;    class Dog&#10;    class DanishDog:Dog&#10;&#10;    val dogTrainer : Trainer&amp;lt;Dog&amp;gt; = Trainer&amp;lt;Dog&amp;gt;()&#10;    val danishDogTrainer : Trainer&amp;lt;DanishDog&amp;gt; = dogTrainer&#10;&lt;/pre&gt;&#10;&#10;In other words: the ordering of the generic is &lt;b&gt;contra&lt;/b&gt; to the ordering of the generic type.&#10;When &lt;code&gt;DanishDog&lt;/code&gt; extends &lt;code&gt;Dog&lt;/code&gt;, &lt;code&gt;Trainer&amp;lt;Dog&amp;gt;&lt;/code&gt; can be considered to&#10;extend &lt;code&gt;Trainer&amp;lt;DanishDog&amp;gt;&lt;/code&gt;.&#10;&#10;&lt;h2&gt;Why would we want this?&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Let's say you have a class &lt;code&gt;Trainer&amp;lt;T&amp;gt;&lt;/code&gt;: and it has only methods that consume &lt;code&gt;T&lt;/code&gt;,&#10;    and there are no methods that return &lt;code&gt;T&lt;/code&gt;. In this case contravariance could be desired,&#10;    because the methods that consume the superclass, will have no problem consuming the subclass.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    For example:&#10;&lt;/p&gt;&#10;&lt;pre&gt;&#10;    abstract class Dog(val name:String)&#10;    class DanishDog(name:String):Dog(name)&#10;&#10;    interface Trainer&amp;lt;T&amp;gt;{&#10;        fun train(target:T)&#10;    }&#10;&#10;    val dogTrainer = object:Trainer&amp;lt;Dog&amp;gt;{&#10;        override fun train(target:Dog) {&#10;            println(&quot;Dog ${target.name} is trained&quot;)&#10;        }&#10;    }&#10;&#10;    val danishDogTrainer:Trainer&amp;lt;DanishDog&amp;gt; = dogTrainer&#10;&lt;/pre&gt;&#10;&lt;p&gt;&#10;    In this example it shoukd not be a problem to cast the dogTrainer to the danishDogTrainer. This is because it has only&#10;    methods consuming T, and when such a method process Dog, it has no problem processing a DanishDog.&#10;&lt;/p&gt;&#10;&lt;p&gt;&#10;    If you have a class as described above, with only methods that have &lt;code&gt;T&lt;/code&gt; as an argument and no&#10;    methods returning &lt;code&gt;T&lt;/code&gt;, we call this a &lt;b&gt;consumer&lt;/b&gt;.&#10;&lt;/p&gt;&#10;&#10;&lt;h2&gt;How to make a class contravariant?&lt;/h2&gt;&#10;&#10;Making a class contravariant, in other words, having &lt;code&gt;Trainer&amp;lt;Dog&amp;gt;&lt;/code&gt; to be considered&#10;extending &lt;code&gt;Trainer&amp;lt;DanishDog&amp;gt;&lt;/code&gt;, requires you to add the keyword &lt;b&gt;in&lt;/b&gt;&#10;&#10;&lt;pre&gt;&#10;    class Trainer&amp;lt;&lt;b&gt;in&lt;/b&gt; T&amp;gt;{&#10;        fun train(target:T)&#10;    }&#10;&#10;&lt;/pre&gt;&#10;If you don't add &lt;b&gt;in&lt;/b&gt;, kotlin will keep considering the class invariant.&#10;Be aware however that you can only add &lt;b&gt;in&lt;/b&gt; to classes that have &lt;b&gt;NO methods that return T!&lt;/b&gt;&#10;&#10;&#10;&lt;h2&gt;Assignment&lt;/h2&gt;&#10;&#10;The current class is not contravariant. Make it so that it can and will be contravariant:&#10;&lt;ul&gt;&#10;    &lt;li&gt;Make the class a consumer: remove all producer methods&lt;/li&gt;&#10;    &lt;li&gt;Add the right keyword&lt;/li&gt;&#10;    &lt;li&gt;Eventually assign a generic dog trainer to a danish dog trainer to showcase the contravariance&lt;/li&gt;&#10;&lt;/ul&gt;&#10;&#10;&lt;/html&gt;" />
                            <option name="feedbackLink">
                              <FeedbackLink>
                                <option name="link" />
                                <option name="type" value="STEPIK" />
                              </FeedbackLink>
                            </option>
                            <option name="id" value="548562" />
                            <option name="index" value="3" />
                            <option name="name" value="Variance - contravariance" />
                            <option name="record" value="-1" />
                            <option name="status" value="Unchecked" />
                            <option name="stepikChangeStatus" value="Up to date" />
                            <option name="files">
                              <map>
                                <entry key="src/Task.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="0" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="177" />
                                                <option name="offset" value="80" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="177" />
                                            <option name="offset" value="80" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="open class Trainer&lt;T&gt; {&#10;&#10;    open fun train(target: T) {&#10;        throw NotImplementedError()&#10;    }&#10;&#10;    open fun trainedTarget(): T {&#10;        throw NotImplementedError()&#10;    }&#10;}" />
                                            <option name="possibleAnswer" value="open class Trainer&lt;in T&gt; {&#10;&#10;    open fun train(target: T) {&#10;        throw NotImplementedError()&#10;    }&#10;}" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                          <AnswerPlaceholder>
                                            <option name="hints">
                                              <list />
                                            </option>
                                            <option name="index" value="1" />
                                            <option name="initialState">
                                              <MyInitialState>
                                                <option name="length" value="58" />
                                                <option name="offset" value="542" />
                                              </MyInitialState>
                                            </option>
                                            <option name="initializedFromDependency" value="false" />
                                            <option name="length" value="58" />
                                            <option name="offset" value="542" />
                                            <option name="placeholderDependency" />
                                            <option name="placeholderText" value="//Assign the generic dog trainer to the danish dog trainer" />
                                            <option name="possibleAnswer" value="danishDogTrainer = dogTrainer" />
                                            <option name="selected" value="false" />
                                            <option name="status" value="Unchecked" />
                                            <option name="studentAnswer" />
                                            <option name="useLength" value="true" />
                                          </AnswerPlaceholder>
                                        </list>
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="src/Task.kt" />
                                      <option name="text" value="abstract class Dog(val name: String)&#10;class DanishDog(name: String) : Dog(name)&#10;&#10;open class Trainer&lt;T&gt; {&#10;&#10;    open fun train(target: T) {&#10;        throw NotImplementedError()&#10;    }&#10;&#10;    open fun trainedTarget(): T {&#10;        throw NotImplementedError()&#10;    }&#10;}&#10;&#10;class UseCase {&#10;    var danishDogTrainer: Trainer&lt;DanishDog&gt;? = null&#10;&#10;    fun assignTrainer() {&#10;        val dogTrainer = object : Trainer&lt;Dog&gt;() {&#10;            override fun train(target: Dog) {&#10;                println(&quot;Dog ${target.name} is trained&quot;)&#10;            }&#10;        }&#10;&#10;        //Assign the generic dog trainer to the danish dog trainer&#10;    }&#10;}&#10;" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="true" />
                                    </TaskFile>
                                  </value>
                                </entry>
                                <entry key="test/Tests.kt">
                                  <value>
                                    <TaskFile>
                                      <option name="answerPlaceholders">
                                        <list />
                                      </option>
                                      <option name="highlightErrors" value="false" />
                                      <option name="name" value="test/Tests.kt" />
                                      <option name="text" value="import org.junit.Assert.assertFalse&#10;import org.junit.Assert.assertTrue&#10;import org.junit.Test&#10;&#10;&#10;class Test {&#10;    @Test&#10;    fun testSolution() {&#10;        val dogTrainer = Trainer&lt;Dog&gt;()&#10;        assertFalse(&quot;Class still has a producer method&quot;,&#10;                dogTrainer.javaClass.kotlin.members.any { it.name == &quot;trainedTarget&quot; }&#10;        )&#10;&#10;&#10;        val useCase = UseCase()&#10;&#10;        useCase.assignTrainer()&#10;        assertTrue(&#10;                &quot;Assign a generic dog trainer to the danish dog trainer&quot;,&#10;                useCase.danishDogTrainer?.train(DanishDog(&quot;Fikkie&quot;)) != null&#10;        )&#10;    }&#10;}" />
                                      <option name="trackChanges" value="true" />
                                      <option name="trackLengths" value="true" />
                                      <option name="visible" value="false" />
                                    </TaskFile>
                                  </value>
                                </entry>
                              </map>
                            </option>
                            <option name="updateDate" value="1557009965000" />
                          </EduTask>
                        </list>
                      </option>
                    </Lesson>
                  </list>
                </option>
              </Section>
            </list>
          </option>
        </EduCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>